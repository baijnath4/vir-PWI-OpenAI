import {
  BaseError,
  ChatInputSchema,
  ChatOutputSchema,
  ChatStreamInputSchema,
  ChatStreamOutputSchema,
  Client,
  FileInputSchema,
  FileOutputSchema,
  FilePurposeSchema,
  FilesOutputSchema,
  GenerateConfigInputSchema,
  GenerateConfigOutputSchema,
  GenerateInputSchema,
  GenerateLimitsOutputSchema,
  HistoryInputSchema,
  HistoryOriginSchema,
  HistoryOutputSchema,
  HistoryStatusSchema,
  HttpError,
  InternalError,
  InvalidInputError,
  ModelOutputSchema,
  ModelsOutputSchema,
  PromptTemplateCreateInputSchema,
  PromptTemplateExecuteInputSchema,
  PromptTemplateExecuteOutputSchema,
  PromptTemplateInputSchema,
  PromptTemplateOutputSchema,
  PromptTemplateUpdateInputSchema,
  PromptTemplatesOutputSchema,
  RETRY_ATTEMPTS_DEFAULT,
  RequestCanceledError,
  RequestError,
  TokenizeInputSchema,
  TokenizeOutputSchema,
  TuneInputSchema,
  TuneMethodsOutputSchema,
  TuneOutputSchema,
  TuneStatusSchema,
  api_types_exports,
  errorTransformer,
  isRetrievableError,
  version
} from "./chunk-LHGFTNJV.js";

// src/client/types.ts
import { z } from "zod";
var ListInputSchema = z.object({
  offset: z.number().int().nonnegative().nullish(),
  count: z.number().int().positive().nullish()
});
var BaseGenerateInputSchema = GenerateInputSchema.omit({
  inputs: true,
  use_default: true,
  prompt_id: true,
  model_id: true
}).extend({ input: z.string() });
var GenerateInputSchema2 = z.union([
  BaseGenerateInputSchema.extend({
    model_id: GenerateInputSchema.shape.model_id,
    prompt_id: z.never().optional()
  }),
  BaseGenerateInputSchema.extend({
    prompt_id: GenerateInputSchema.shape.prompt_id,
    model_id: z.never().optional()
  })
]);
var GenerateConfigInputSchema2 = GenerateConfigInputSchema;
var GenerateConfigOutputSchema2 = GenerateConfigOutputSchema;
var GenerateLimitsInputSchema = z.never();
var GenerateLimitsOutputSchema2 = GenerateLimitsOutputSchema;
var TokenizeInputSchema2 = TokenizeInputSchema.omit({
  inputs: true
}).extend({ input: z.string() });
var TokenizeOutputSchema2 = TokenizeOutputSchema.shape.results.element;
var ModelsInputSchema = z.never();
var ModelsOutputSchema2 = ModelsOutputSchema.shape.results;
var ModelInputSchema = z.object({ id: z.string() });
var ModelOutputSchema2 = ModelOutputSchema.shape.results;
var TunesInputSchema = z.object({
  filters: ListInputSchema.and(
    z.object({
      search: z.string().nullish(),
      status: TuneStatusSchema.nullish()
    })
  )
}).partial();
var TuneAssetTypeSchema = z.enum(["encoder", "logs"]);
var TuneInputSchema2 = z.object({
  id: z.string()
});
var TuneCreateInputSchema = TuneInputSchema;
var TuneOutputSchema2 = z.union([
  TuneOutputSchema.shape.results.extend({
    status: TuneOutputSchema.shape.results.shape.status.exclude([
      "COMPLETED"
    ])
  }),
  TuneOutputSchema.shape.results.extend({
    status: TuneOutputSchema.shape.results.shape.status.extract([
      "COMPLETED"
    ])
  }).and(
    z.object({
      downloadAsset: z.function().args(TuneAssetTypeSchema).returns(z.custom())
    })
  )
]);
var TuneDeleteOutputSchema = z.void();
var TuneMethodsInputSchema = z.never();
var TuneMethodsOutputSchema2 = TuneMethodsOutputSchema.shape.results;
var PromptTemplateInputSchema2 = PromptTemplateInputSchema;
var PromptTemplateCreateInputSchema2 = PromptTemplateCreateInputSchema;
var PromptTemplateUpdateInputSchema2 = z.intersection(
  PromptTemplateInputSchema2,
  PromptTemplateUpdateInputSchema
);
var PromptTemplateOutputSchema2 = PromptTemplateOutputSchema.shape.results;
var PromptTemplateDeleteOutputSchema = z.void();
var PromptTemplatesInputSchema = ListInputSchema;
var PromptTemplatesOutputSchema2 = PromptTemplatesOutputSchema.shape.results.element;
var PromptTemplateExecuteInputSchema2 = PromptTemplateExecuteInputSchema;
var PromptTemplateExecuteOutputSchema2 = PromptTemplateExecuteOutputSchema.shape.results;
var HistoryInputSchema2 = ListInputSchema.and(
  HistoryInputSchema.pick({
    status: true,
    origin: true
  })
);
var HistoryOutputSchema2 = HistoryOutputSchema.shape.results.element;
var HistoryStatusSchema2 = HistoryStatusSchema;
var HistoryOriginSchema2 = HistoryOriginSchema;
var FilePurposeSchema2 = FilePurposeSchema;
var FileInputSchema2 = FileInputSchema;
var FileCreateInputSchema = z.object({
  purpose: FilePurposeSchema2,
  filename: z.string(),
  file: z.custom()
});
var FileOutputSchema2 = FileOutputSchema.shape.results.and(
  z.object({
    download: z.function().returns(z.custom())
  })
);
var FileDeleteOutputSchema = z.void();
var FilesInputSchema = ListInputSchema;
var FilesOutputSchema2 = FilesOutputSchema.shape.results.element;
var ChatInputSchema2 = z.union([
  ChatInputSchema,
  ChatStreamInputSchema
]);
var ChatOutputSchema2 = ChatOutputSchema.omit({
  results: true
}).extend({ result: ChatOutputSchema.shape.results.element });
var ChatStreamInputSchema2 = ChatStreamInputSchema;
var ChatStreamOutputSchema2 = ChatStreamOutputSchema.omit({
  results: true
}).extend({ result: ChatOutputSchema.shape.results.element });
export {
  api_types_exports as ApiTypes,
  BaseError,
  ChatInputSchema2 as ChatInputSchema,
  ChatOutputSchema2 as ChatOutputSchema,
  ChatStreamInputSchema2 as ChatStreamInputSchema,
  ChatStreamOutputSchema2 as ChatStreamOutputSchema,
  Client,
  FileCreateInputSchema,
  FileDeleteOutputSchema,
  FileInputSchema2 as FileInputSchema,
  FileOutputSchema2 as FileOutputSchema,
  FilePurposeSchema2 as FilePurposeSchema,
  FilesInputSchema,
  FilesOutputSchema2 as FilesOutputSchema,
  GenerateConfigInputSchema2 as GenerateConfigInputSchema,
  GenerateConfigOutputSchema2 as GenerateConfigOutputSchema,
  GenerateInputSchema2 as GenerateInputSchema,
  GenerateLimitsInputSchema,
  GenerateLimitsOutputSchema2 as GenerateLimitsOutputSchema,
  HistoryInputSchema2 as HistoryInputSchema,
  HistoryOriginSchema2 as HistoryOriginSchema,
  HistoryOutputSchema2 as HistoryOutputSchema,
  HistoryStatusSchema2 as HistoryStatusSchema,
  HttpError,
  InternalError,
  InvalidInputError,
  ModelInputSchema,
  ModelOutputSchema2 as ModelOutputSchema,
  ModelsInputSchema,
  ModelsOutputSchema2 as ModelsOutputSchema,
  PromptTemplateCreateInputSchema2 as PromptTemplateCreateInputSchema,
  PromptTemplateDeleteOutputSchema,
  PromptTemplateExecuteInputSchema2 as PromptTemplateExecuteInputSchema,
  PromptTemplateExecuteOutputSchema2 as PromptTemplateExecuteOutputSchema,
  PromptTemplateInputSchema2 as PromptTemplateInputSchema,
  PromptTemplateOutputSchema2 as PromptTemplateOutputSchema,
  PromptTemplateUpdateInputSchema2 as PromptTemplateUpdateInputSchema,
  PromptTemplatesInputSchema,
  PromptTemplatesOutputSchema2 as PromptTemplatesOutputSchema,
  RETRY_ATTEMPTS_DEFAULT,
  RequestCanceledError,
  RequestError,
  TokenizeInputSchema2 as TokenizeInputSchema,
  TokenizeOutputSchema2 as TokenizeOutputSchema,
  TuneAssetTypeSchema,
  TuneCreateInputSchema,
  TuneDeleteOutputSchema,
  TuneInputSchema2 as TuneInputSchema,
  TuneMethodsInputSchema,
  TuneMethodsOutputSchema2 as TuneMethodsOutputSchema,
  TuneOutputSchema2 as TuneOutputSchema,
  TunesInputSchema,
  errorTransformer,
  isRetrievableError,
  version
};
