import { E as ErrorExtensions, a as ErrorResponse } from './client-d0435e6d.js';
export { b as ApiTypes, aK as ChatInput, aJ as ChatInputSchema, aL as ChatOptions, aN as ChatOutput, aM as ChatOutputSchema, aP as ChatStreamInput, aO as ChatStreamInputSchema, aQ as ChatStreamOptions, aS as ChatStreamOutput, aR as ChatStreamOutputSchema, c as Client, C as Configuration, ay as FileCreateInput, ax as FileCreateInputSchema, aG as FileDeleteOptions, aC as FileDeleteOutput, aB as FileDeleteOutputSchema, aw as FileInput, av as FileInputSchema, aF as FileOptions, aA as FileOutput, az as FileOutputSchema, au as FilePupose, at as FilePurposeSchema, aE as FilesInput, aD as FilesInputSchema, aI as FilesOutput, aH as FilesOutputSchema, i as GenerateConfigInput, m as GenerateConfigInputOptions, h as GenerateConfigInputSchema, l as GenerateConfigOptions, k as GenerateConfigOutput, j as GenerateConfigOutputSchema, f as GenerateInput, G as GenerateInputSchema, o as GenerateLimitsInput, n as GenerateLimitsInputSchema, q as GenerateLimitsOutput, p as GenerateLimitsOutputSchema, g as GenerateOutput, al as HistoryInput, ak as HistoryInputSchema, am as HistoryOptions, as as HistoryOrigin, ar as HistoryOriginSchema, ao as HistoryOutput, an as HistoryOutputSchema, aq as HistoryStatus, ap as HistoryStatusSchema, d as HttpHandlerNoStreamOptions, H as HttpHandlerOptions, e as HttpHandlerStreamOptions, y as ModelInput, x as ModelInputSchema, A as ModelOutput, z as ModelOutputSchema, u as ModelsInput, M as ModelsInputSchema, w as ModelsOutput, v as ModelsOutputSchema, a2 as PromptTemplateCreateInput, a1 as PromptTemplateCreateInputSchema, ae as PromptTemplateDeleteOptions, a8 as PromptTemplateDeleteOutput, a7 as PromptTemplateDeleteOutputSchema, ag as PromptTemplateExecuteInput, af as PromptTemplateExecuteInputSchema, aj as PromptTemplateExecuteOptions, ai as PromptTemplateExecuteOutput, ah as PromptTemplateExecuteOutputSchema, a0 as PromptTemplateInput, $ as PromptTemplateInputSchema, ad as PromptTemplateOptions, a6 as PromptTemplateOutput, a5 as PromptTemplateOutputSchema, a4 as PromptTemplateUpdateInput, a3 as PromptTemplateUpdateInputSchema, aa as PromptTemplatesInput, a9 as PromptTemplatesInputSchema, ac as PromptTemplatesOutput, ab as PromptTemplatesOutputSchema, R as RawHeaders, r as TokenizeInput, T as TokenizeInputSchema, t as TokenizeOutput, s as TokenizeOutputSchema, I as TuneAssetType, J as TuneAssetTypeSchema, P as TuneCreateInput, O as TuneCreateInputSchema, Q as TuneCreateOptions, W as TuneDeleteOutput, V as TuneDeleteOutputSchema, L as TuneInput, K as TuneInputSchema, Y as TuneMethodsInput, X as TuneMethodsInputSchema, _ as TuneMethodsOutput, Z as TuneMethodsOutputSchema, N as TuneOptions, U as TuneOutput, S as TuneOutputSchema, D as TunesInput, B as TunesInputSchema, F as TunesOutput } from './client-d0435e6d.js';
import { IncomingHttpHeaders } from 'node:http';
import 'stream';
import 'node:stream';
import 'zod';
import 'form-data';

declare class BaseError extends Error {
}
declare class InvalidInputError extends BaseError {
}
declare class InternalError extends BaseError {
}
declare class RequestError extends BaseError {
    code?: string;
    cancelled: boolean;
    constructor(message?: string, code?: string, cancelled?: boolean, options?: ErrorOptions);
}
declare class RequestCanceledError extends RequestError {
    constructor(message?: string, code?: string, options?: ErrorOptions);
}
declare class HttpError extends RequestError {
    statusCode: number;
    extensions?: ErrorExtensions;
    response: ErrorResponse;
    headers: IncomingHttpHeaders;
    constructor(message: string, statusText: string, statusCode: number, extensions: ErrorExtensions | undefined, response: ErrorResponse, headers: IncomingHttpHeaders, options?: ErrorOptions);
}
declare function errorTransformer(err: unknown): unknown;
declare function isRetrievableError(error: unknown): boolean;

declare const version: string | undefined;

declare const RETRY_ATTEMPTS_DEFAULT = 3;

export { BaseError, HttpError, InternalError, InvalidInputError, RETRY_ATTEMPTS_DEFAULT, RequestCanceledError, RequestError, errorTransformer, isRetrievableError, version };
