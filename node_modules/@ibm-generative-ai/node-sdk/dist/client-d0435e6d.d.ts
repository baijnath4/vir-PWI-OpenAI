import { Readable } from 'stream';
import { Readable as Readable$1 } from 'node:stream';
import { z } from 'zod';
import FormData from 'form-data';

type UnionKeys<T> = T extends T ? keyof T : never;
type StrictUnionHelper<T, P> = T extends any ? T & Partial<Record<Exclude<UnionKeys<P>, keyof T>, never>> : never;
type StrictUnion<T> = StrictUnionHelper<T, T>;

declare class TypedReadable<T> extends Readable {
    _read(size: number): void;
    addListener(event: 'close', listener: () => void): this;
    addListener(event: 'data', listener: (chunk: T) => void): this;
    addListener(event: 'end', listener: () => void): this;
    addListener(event: 'error', listener: (err: Error) => void): this;
    addListener(event: 'pause', listener: () => void): this;
    addListener(event: 'readable', listener: () => void): this;
    addListener(event: 'resume', listener: () => void): this;
    on(event: 'close', listener: () => void): this;
    on(event: 'data', listener: (chunk: T) => void): this;
    on(event: 'end', listener: () => void): this;
    on(event: 'error', listener: (err: Error) => void): this;
    on(event: 'pause', listener: () => void): this;
    on(event: 'readable', listener: () => void): this;
    on(event: 'resume', listener: () => void): this;
    [Symbol.asyncIterator](): AsyncIterableIterator<T>;
}

type RequiredPartial<T, L extends keyof T> = Required<Pick<T, L>> & Partial<Omit<T, L>>;
type FlagOption<Key extends string, T extends boolean> = T extends true ? {
    [k in Key]: true;
} : {
    [k in Key]?: false;
};
type ErrorCallback = (err: unknown) => void;
type DataCallback<T> = (err: unknown, result: T) => void;
type Callback<T> = ErrorCallback | DataCallback<T>;

interface ErrorExtensions {
    code: string;
    reason?: string;
    state?: Record<string, any>;
}
interface ErrorResponse {
    status_code: number;
    error: string;
    message: string;
    extensions?: ErrorExtensions;
}
interface UserOutput {
    results: {
        firstName?: string;
        lastName?: string;
        tou_accepted: boolean;
        tou_accepted_at?: string;
        generate_default?: {
            model_id: string;
            parameters: Record<string, any>;
        };
        data_usage_consent: boolean;
    };
}
declare const UserGenerateDefaultInputSchema: z.ZodObject<{
    model_id: z.ZodString;
    parameters: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
}, "strip", z.ZodTypeAny, {
    model_id: string;
    parameters?: Record<string, any> | undefined;
}, {
    model_id: string;
    parameters?: Record<string, any> | undefined;
}>;
type UserGenerateDefaultInput = z.infer<typeof UserGenerateDefaultInputSchema>;
interface UserGenerateDefaultOutput {
    results: {
        generate_default?: {
            model_id: string;
            parameters: Record<string, any>;
        };
    };
}
declare const GenerateInputSchema$1: z.ZodObject<{
    model_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    prompt_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    inputs: z.ZodArray<z.ZodString, "many">;
    parameters: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
    use_default: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    inputs: string[];
    model_id?: string | null | undefined;
    prompt_id?: string | null | undefined;
    parameters?: Record<string, any> | undefined;
    use_default?: boolean | undefined;
}, {
    inputs: string[];
    model_id?: string | null | undefined;
    prompt_id?: string | null | undefined;
    parameters?: Record<string, any> | undefined;
    use_default?: boolean | undefined;
}>;
type GenerateInput$1 = z.infer<typeof GenerateInputSchema$1>;
declare const GenerateStopReasonSchema: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
type GenerateStopReason = z.infer<typeof GenerateStopReasonSchema>;
declare const GenerateResultSchema: z.ZodObject<{
    generated_text: z.ZodString;
    generated_token_count: z.ZodNumber;
    input_token_count: z.ZodNumber;
    stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    generated_text: z.ZodString;
    generated_token_count: z.ZodNumber;
    input_token_count: z.ZodNumber;
    stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    generated_text: z.ZodString;
    generated_token_count: z.ZodNumber;
    input_token_count: z.ZodNumber;
    stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
}, z.ZodTypeAny, "passthrough">>;
type GenerateResult = z.infer<typeof GenerateResultSchema>;
declare const GenerateOutputSchema: z.ZodObject<{
    model_id: z.ZodString;
    created_at: z.ZodDate;
    results: z.ZodArray<z.ZodObject<{
        generated_text: z.ZodString;
        generated_token_count: z.ZodNumber;
        input_token_count: z.ZodNumber;
        stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        generated_text: z.ZodString;
        generated_token_count: z.ZodNumber;
        input_token_count: z.ZodNumber;
        stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        generated_text: z.ZodString;
        generated_token_count: z.ZodNumber;
        input_token_count: z.ZodNumber;
        stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
    }, z.ZodTypeAny, "passthrough">>, "many">;
    moderation: z.ZodOptional<z.ZodObject<{
        hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
            success: z.ZodBoolean;
            flagged: z.ZodBoolean;
            score: z.ZodNumber;
            position: z.ZodObject<{
                start: z.ZodNumber;
                stop: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                start: number;
                stop: number;
            }, {
                start: number;
                stop: number;
            }>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            success: z.ZodBoolean;
            flagged: z.ZodBoolean;
            score: z.ZodNumber;
            position: z.ZodObject<{
                start: z.ZodNumber;
                stop: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                start: number;
                stop: number;
            }, {
                start: number;
                stop: number;
            }>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            success: z.ZodBoolean;
            flagged: z.ZodBoolean;
            score: z.ZodNumber;
            position: z.ZodObject<{
                start: z.ZodNumber;
                stop: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                start: number;
                stop: number;
            }, {
                start: number;
                stop: number;
            }>;
        }, z.ZodTypeAny, "passthrough">>, "many">>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
            success: z.ZodBoolean;
            flagged: z.ZodBoolean;
            score: z.ZodNumber;
            position: z.ZodObject<{
                start: z.ZodNumber;
                stop: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                start: number;
                stop: number;
            }, {
                start: number;
                stop: number;
            }>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            success: z.ZodBoolean;
            flagged: z.ZodBoolean;
            score: z.ZodNumber;
            position: z.ZodObject<{
                start: z.ZodNumber;
                stop: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                start: number;
                stop: number;
            }, {
                start: number;
                stop: number;
            }>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            success: z.ZodBoolean;
            flagged: z.ZodBoolean;
            score: z.ZodNumber;
            position: z.ZodObject<{
                start: z.ZodNumber;
                stop: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                start: number;
                stop: number;
            }, {
                start: number;
                stop: number;
            }>;
        }, z.ZodTypeAny, "passthrough">>, "many">>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
            success: z.ZodBoolean;
            flagged: z.ZodBoolean;
            score: z.ZodNumber;
            position: z.ZodObject<{
                start: z.ZodNumber;
                stop: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                start: number;
                stop: number;
            }, {
                start: number;
                stop: number;
            }>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            success: z.ZodBoolean;
            flagged: z.ZodBoolean;
            score: z.ZodNumber;
            position: z.ZodObject<{
                start: z.ZodNumber;
                stop: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                start: number;
                stop: number;
            }, {
                start: number;
                stop: number;
            }>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            success: z.ZodBoolean;
            flagged: z.ZodBoolean;
            score: z.ZodNumber;
            position: z.ZodObject<{
                start: z.ZodNumber;
                stop: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                start: number;
                stop: number;
            }, {
                start: number;
                stop: number;
            }>;
        }, z.ZodTypeAny, "passthrough">>, "many">>;
    }, z.ZodTypeAny, "passthrough">>>;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    model_id: z.ZodString;
    created_at: z.ZodDate;
    results: z.ZodArray<z.ZodObject<{
        generated_text: z.ZodString;
        generated_token_count: z.ZodNumber;
        input_token_count: z.ZodNumber;
        stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        generated_text: z.ZodString;
        generated_token_count: z.ZodNumber;
        input_token_count: z.ZodNumber;
        stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        generated_text: z.ZodString;
        generated_token_count: z.ZodNumber;
        input_token_count: z.ZodNumber;
        stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
    }, z.ZodTypeAny, "passthrough">>, "many">;
    moderation: z.ZodOptional<z.ZodObject<{
        hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
            success: z.ZodBoolean;
            flagged: z.ZodBoolean;
            score: z.ZodNumber;
            position: z.ZodObject<{
                start: z.ZodNumber;
                stop: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                start: number;
                stop: number;
            }, {
                start: number;
                stop: number;
            }>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            success: z.ZodBoolean;
            flagged: z.ZodBoolean;
            score: z.ZodNumber;
            position: z.ZodObject<{
                start: z.ZodNumber;
                stop: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                start: number;
                stop: number;
            }, {
                start: number;
                stop: number;
            }>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            success: z.ZodBoolean;
            flagged: z.ZodBoolean;
            score: z.ZodNumber;
            position: z.ZodObject<{
                start: z.ZodNumber;
                stop: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                start: number;
                stop: number;
            }, {
                start: number;
                stop: number;
            }>;
        }, z.ZodTypeAny, "passthrough">>, "many">>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
            success: z.ZodBoolean;
            flagged: z.ZodBoolean;
            score: z.ZodNumber;
            position: z.ZodObject<{
                start: z.ZodNumber;
                stop: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                start: number;
                stop: number;
            }, {
                start: number;
                stop: number;
            }>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            success: z.ZodBoolean;
            flagged: z.ZodBoolean;
            score: z.ZodNumber;
            position: z.ZodObject<{
                start: z.ZodNumber;
                stop: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                start: number;
                stop: number;
            }, {
                start: number;
                stop: number;
            }>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            success: z.ZodBoolean;
            flagged: z.ZodBoolean;
            score: z.ZodNumber;
            position: z.ZodObject<{
                start: z.ZodNumber;
                stop: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                start: number;
                stop: number;
            }, {
                start: number;
                stop: number;
            }>;
        }, z.ZodTypeAny, "passthrough">>, "many">>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
            success: z.ZodBoolean;
            flagged: z.ZodBoolean;
            score: z.ZodNumber;
            position: z.ZodObject<{
                start: z.ZodNumber;
                stop: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                start: number;
                stop: number;
            }, {
                start: number;
                stop: number;
            }>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            success: z.ZodBoolean;
            flagged: z.ZodBoolean;
            score: z.ZodNumber;
            position: z.ZodObject<{
                start: z.ZodNumber;
                stop: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                start: number;
                stop: number;
            }, {
                start: number;
                stop: number;
            }>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            success: z.ZodBoolean;
            flagged: z.ZodBoolean;
            score: z.ZodNumber;
            position: z.ZodObject<{
                start: z.ZodNumber;
                stop: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                start: number;
                stop: number;
            }, {
                start: number;
                stop: number;
            }>;
        }, z.ZodTypeAny, "passthrough">>, "many">>;
    }, z.ZodTypeAny, "passthrough">>>;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    model_id: z.ZodString;
    created_at: z.ZodDate;
    results: z.ZodArray<z.ZodObject<{
        generated_text: z.ZodString;
        generated_token_count: z.ZodNumber;
        input_token_count: z.ZodNumber;
        stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        generated_text: z.ZodString;
        generated_token_count: z.ZodNumber;
        input_token_count: z.ZodNumber;
        stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        generated_text: z.ZodString;
        generated_token_count: z.ZodNumber;
        input_token_count: z.ZodNumber;
        stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
    }, z.ZodTypeAny, "passthrough">>, "many">;
    moderation: z.ZodOptional<z.ZodObject<{
        hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
            success: z.ZodBoolean;
            flagged: z.ZodBoolean;
            score: z.ZodNumber;
            position: z.ZodObject<{
                start: z.ZodNumber;
                stop: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                start: number;
                stop: number;
            }, {
                start: number;
                stop: number;
            }>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            success: z.ZodBoolean;
            flagged: z.ZodBoolean;
            score: z.ZodNumber;
            position: z.ZodObject<{
                start: z.ZodNumber;
                stop: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                start: number;
                stop: number;
            }, {
                start: number;
                stop: number;
            }>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            success: z.ZodBoolean;
            flagged: z.ZodBoolean;
            score: z.ZodNumber;
            position: z.ZodObject<{
                start: z.ZodNumber;
                stop: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                start: number;
                stop: number;
            }, {
                start: number;
                stop: number;
            }>;
        }, z.ZodTypeAny, "passthrough">>, "many">>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
            success: z.ZodBoolean;
            flagged: z.ZodBoolean;
            score: z.ZodNumber;
            position: z.ZodObject<{
                start: z.ZodNumber;
                stop: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                start: number;
                stop: number;
            }, {
                start: number;
                stop: number;
            }>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            success: z.ZodBoolean;
            flagged: z.ZodBoolean;
            score: z.ZodNumber;
            position: z.ZodObject<{
                start: z.ZodNumber;
                stop: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                start: number;
                stop: number;
            }, {
                start: number;
                stop: number;
            }>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            success: z.ZodBoolean;
            flagged: z.ZodBoolean;
            score: z.ZodNumber;
            position: z.ZodObject<{
                start: z.ZodNumber;
                stop: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                start: number;
                stop: number;
            }, {
                start: number;
                stop: number;
            }>;
        }, z.ZodTypeAny, "passthrough">>, "many">>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
            success: z.ZodBoolean;
            flagged: z.ZodBoolean;
            score: z.ZodNumber;
            position: z.ZodObject<{
                start: z.ZodNumber;
                stop: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                start: number;
                stop: number;
            }, {
                start: number;
                stop: number;
            }>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            success: z.ZodBoolean;
            flagged: z.ZodBoolean;
            score: z.ZodNumber;
            position: z.ZodObject<{
                start: z.ZodNumber;
                stop: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                start: number;
                stop: number;
            }, {
                start: number;
                stop: number;
            }>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            success: z.ZodBoolean;
            flagged: z.ZodBoolean;
            score: z.ZodNumber;
            position: z.ZodObject<{
                start: z.ZodNumber;
                stop: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                start: number;
                stop: number;
            }, {
                start: number;
                stop: number;
            }>;
        }, z.ZodTypeAny, "passthrough">>, "many">>;
    }, z.ZodTypeAny, "passthrough">>>;
}, z.ZodTypeAny, "passthrough">>;
type GenerateOutput$1 = z.infer<typeof GenerateOutputSchema>;
declare const GenerateLimitsOutputSchema$1: z.ZodObject<{
    tokenCapacity: z.ZodNumber;
    tokensUsed: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    tokenCapacity: number;
    tokensUsed: number;
}, {
    tokenCapacity: number;
    tokensUsed: number;
}>;
type GenerateLimitsOutput$1 = z.output<typeof GenerateLimitsOutputSchema$1>;
declare const GenerateConfigInputSchema$1: z.ZodObject<{
    model_id: z.ZodOptional<z.ZodString>;
    parameters: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
}, "strip", z.ZodTypeAny, {
    model_id?: string | undefined;
    parameters?: Record<string, any> | undefined;
}, {
    model_id?: string | undefined;
    parameters?: Record<string, any> | undefined;
}>;
type GenerateConfigInput$1 = z.infer<typeof GenerateConfigInputSchema$1>;
declare const GenerateConfigOutputSchema$1: z.ZodObject<{
    model_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    parameters: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
}, "strip", z.ZodTypeAny, {
    model_id?: string | null | undefined;
    parameters?: Record<string, any> | null | undefined;
}, {
    model_id?: string | null | undefined;
    parameters?: Record<string, any> | null | undefined;
}>;
type GenerateConfigOutput$1 = z.output<typeof GenerateConfigOutputSchema$1>;
declare const TokenizeInputSchema$1: z.ZodObject<{
    model_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    inputs: z.ZodArray<z.ZodString, "many">;
    use_default: z.ZodOptional<z.ZodBoolean>;
    parameters: z.ZodOptional<z.ZodObject<{
        return_tokens: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        return_tokens?: boolean | undefined;
    }, {
        return_tokens?: boolean | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    inputs: string[];
    model_id?: string | null | undefined;
    use_default?: boolean | undefined;
    parameters?: {
        return_tokens?: boolean | undefined;
    } | undefined;
}, {
    inputs: string[];
    model_id?: string | null | undefined;
    use_default?: boolean | undefined;
    parameters?: {
        return_tokens?: boolean | undefined;
    } | undefined;
}>;
type TokenizeInput$1 = z.infer<typeof TokenizeInputSchema$1>;
declare const TokenizeOutputSchema$1: z.ZodObject<{
    model_id: z.ZodString;
    created_at: z.ZodString;
    results: z.ZodArray<z.ZodObject<{
        token_count: z.ZodNumber;
        tokens: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        token_count: number;
        tokens: string[];
    }, {
        token_count: number;
        tokens: string[];
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    results: {
        token_count: number;
        tokens: string[];
    }[];
    model_id: string;
    created_at: string;
}, {
    results: {
        token_count: number;
        tokens: string[];
    }[];
    model_id: string;
    created_at: string;
}>;
type TokenizeOutput$1 = z.output<typeof TokenizeOutputSchema$1>;
declare const ModelsOutputSchema$1: z.ZodObject<{
    results: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        size: z.ZodString;
        token_limit: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        id: string;
        name: string;
        size: string;
        token_limit: number;
    }, {
        id: string;
        name: string;
        size: string;
        token_limit: number;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    results: {
        id: string;
        name: string;
        size: string;
        token_limit: number;
    }[];
}, {
    results: {
        id: string;
        name: string;
        size: string;
        token_limit: number;
    }[];
}>;
type ModelsOutput$1 = z.output<typeof ModelsOutputSchema$1>;
declare const ModelOutputSchema$1: z.ZodObject<{
    results: z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        size: z.ZodString;
        description: z.ZodString;
        token_limit: z.ZodNumber;
        tags: z.ZodArray<z.ZodString, "many">;
        source_model_id: z.ZodNullable<z.ZodString>;
        tasks: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            json_example: z.ZodString;
            jsonl_example: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            name: string;
            json_example: string;
            jsonl_example: string;
        }, {
            id: string;
            name: string;
            json_example: string;
            jsonl_example: string;
        }>, "many">;
        model_family: z.ZodObject<{
            id: z.ZodNumber;
            name: z.ZodString;
            short_description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            id: number;
            name: string;
            short_description?: string | null | undefined;
            description?: string | null | undefined;
        }, {
            id: number;
            name: string;
            short_description?: string | null | undefined;
            description?: string | null | undefined;
        }>;
        schema_generate: z.ZodObject<{
            id: z.ZodNumber;
            value: z.ZodAny;
        }, "strip", z.ZodTypeAny, {
            id: number;
            value?: any;
        }, {
            id: number;
            value?: any;
        }>;
        schema_tokenize: z.ZodObject<{
            id: z.ZodNumber;
            value: z.ZodAny;
        }, "strip", z.ZodTypeAny, {
            id: number;
            value?: any;
        }, {
            id: number;
            value?: any;
        }>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        name: string;
        size: string;
        token_limit: number;
        description: string;
        tags: string[];
        source_model_id: string | null;
        tasks: {
            id: string;
            name: string;
            json_example: string;
            jsonl_example: string;
        }[];
        model_family: {
            id: number;
            name: string;
            short_description?: string | null | undefined;
            description?: string | null | undefined;
        };
        schema_generate: {
            id: number;
            value?: any;
        };
        schema_tokenize: {
            id: number;
            value?: any;
        };
    }, {
        id: string;
        name: string;
        size: string;
        token_limit: number;
        description: string;
        tags: string[];
        source_model_id: string | null;
        tasks: {
            id: string;
            name: string;
            json_example: string;
            jsonl_example: string;
        }[];
        model_family: {
            id: number;
            name: string;
            short_description?: string | null | undefined;
            description?: string | null | undefined;
        };
        schema_generate: {
            id: number;
            value?: any;
        };
        schema_tokenize: {
            id: number;
            value?: any;
        };
    }>;
}, "strip", z.ZodTypeAny, {
    results: {
        id: string;
        name: string;
        size: string;
        token_limit: number;
        description: string;
        tags: string[];
        source_model_id: string | null;
        tasks: {
            id: string;
            name: string;
            json_example: string;
            jsonl_example: string;
        }[];
        model_family: {
            id: number;
            name: string;
            short_description?: string | null | undefined;
            description?: string | null | undefined;
        };
        schema_generate: {
            id: number;
            value?: any;
        };
        schema_tokenize: {
            id: number;
            value?: any;
        };
    };
}, {
    results: {
        id: string;
        name: string;
        size: string;
        token_limit: number;
        description: string;
        tags: string[];
        source_model_id: string | null;
        tasks: {
            id: string;
            name: string;
            json_example: string;
            jsonl_example: string;
        }[];
        model_family: {
            id: number;
            name: string;
            short_description?: string | null | undefined;
            description?: string | null | undefined;
        };
        schema_generate: {
            id: number;
            value?: any;
        };
        schema_tokenize: {
            id: number;
            value?: any;
        };
    };
}>;
type ModelOutput$1 = z.output<typeof ModelOutputSchema$1>;
declare const TuneStatusSchema: z.ZodEnum<["INITIALIZING", "NOT_STARTED", "PENDING", "HALTED", "RUNNING", "QUEUED", "COMPLETED", "FAILED"]>;
type TuneStatus = z.infer<typeof TuneStatusSchema>;
declare const TuneMixinSchema: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    model_id: z.ZodString;
    method_id: z.ZodString;
    model_name: z.ZodString;
    status: z.ZodEnum<["INITIALIZING", "NOT_STARTED", "PENDING", "HALTED", "RUNNING", "QUEUED", "COMPLETED", "FAILED"]>;
    task_id: z.ZodString;
    parameters: z.ZodObject<{
        batch_size: z.ZodNumber;
        num_epochs: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        batch_size: number;
        num_epochs: number;
    }, {
        batch_size: number;
        num_epochs: number;
    }>;
    created_at: z.ZodString;
}, "strip", z.ZodTypeAny, {
    status: "INITIALIZING" | "NOT_STARTED" | "PENDING" | "HALTED" | "RUNNING" | "QUEUED" | "COMPLETED" | "FAILED";
    model_id: string;
    parameters: {
        batch_size: number;
        num_epochs: number;
    };
    created_at: string;
    id: string;
    name: string;
    method_id: string;
    model_name: string;
    task_id: string;
}, {
    status: "INITIALIZING" | "NOT_STARTED" | "PENDING" | "HALTED" | "RUNNING" | "QUEUED" | "COMPLETED" | "FAILED";
    model_id: string;
    parameters: {
        batch_size: number;
        num_epochs: number;
    };
    created_at: string;
    id: string;
    name: string;
    method_id: string;
    model_name: string;
    task_id: string;
}>;
type TuneMixin = z.infer<typeof TuneMixinSchema>;
interface TunesOuput {
    results: TuneMixin[];
    totalCount: number;
}
declare const TuneInputSchema$1: z.ZodObject<{
    name: z.ZodString;
    model_id: z.ZodString;
    task_id: z.ZodString;
    training_file_ids: z.ZodArray<z.ZodString, "many">;
    validation_file_ids: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    evaluation_file_ids: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    method_id: z.ZodString;
    parameters: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
}, "strip", z.ZodTypeAny, {
    model_id: string;
    name: string;
    method_id: string;
    task_id: string;
    training_file_ids: string[];
    validation_file_ids?: string[] | null | undefined;
    evaluation_file_ids?: string[] | null | undefined;
    parameters?: Record<string, any> | null | undefined;
}, {
    model_id: string;
    name: string;
    method_id: string;
    task_id: string;
    training_file_ids: string[];
    validation_file_ids?: string[] | null | undefined;
    evaluation_file_ids?: string[] | null | undefined;
    parameters?: Record<string, any> | null | undefined;
}>;
type TuneInput$1 = z.input<typeof TuneInputSchema$1>;
declare const TuneOutputSchema$1: z.ZodObject<{
    results: z.ZodObject<{
        status: z.ZodEnum<["INITIALIZING", "NOT_STARTED", "PENDING", "HALTED", "RUNNING", "QUEUED", "COMPLETED", "FAILED"]>;
        model_id: z.ZodString;
        parameters: z.ZodObject<{
            batch_size: z.ZodNumber;
            num_epochs: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            batch_size: number;
            num_epochs: number;
        }, {
            batch_size: number;
            num_epochs: number;
        }>;
        created_at: z.ZodString;
        id: z.ZodString;
        name: z.ZodString;
        method_id: z.ZodString;
        model_name: z.ZodString;
        task_id: z.ZodString;
        validation_files: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            file_name: z.ZodString;
            created_at: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            created_at: string;
            id: string;
            file_name: string;
        }, {
            created_at: string;
            id: string;
            file_name: string;
        }>, "many">>>;
        training_files: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            file_name: z.ZodString;
            created_at: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            created_at: string;
            id: string;
            file_name: string;
        }, {
            created_at: string;
            id: string;
            file_name: string;
        }>, "many">>>;
        evaluation_files: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            file_name: z.ZodString;
            created_at: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            created_at: string;
            id: string;
            file_name: string;
        }, {
            created_at: string;
            id: string;
            file_name: string;
        }>, "many">>>;
        datapoints: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            loss: z.ZodArray<z.ZodObject<{
                data: z.ZodAny;
                timestamp: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                timestamp: string;
                data?: any;
            }, {
                timestamp: string;
                data?: any;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            loss: {
                timestamp: string;
                data?: any;
            }[];
        }, {
            loss: {
                timestamp: string;
                data?: any;
            }[];
        }>>>;
    }, "strip", z.ZodTypeAny, {
        status: "INITIALIZING" | "NOT_STARTED" | "PENDING" | "HALTED" | "RUNNING" | "QUEUED" | "COMPLETED" | "FAILED";
        model_id: string;
        parameters: {
            batch_size: number;
            num_epochs: number;
        };
        created_at: string;
        id: string;
        name: string;
        method_id: string;
        model_name: string;
        task_id: string;
        validation_files?: {
            created_at: string;
            id: string;
            file_name: string;
        }[] | null | undefined;
        training_files?: {
            created_at: string;
            id: string;
            file_name: string;
        }[] | null | undefined;
        evaluation_files?: {
            created_at: string;
            id: string;
            file_name: string;
        }[] | null | undefined;
        datapoints?: {
            loss: {
                timestamp: string;
                data?: any;
            }[];
        } | null | undefined;
    }, {
        status: "INITIALIZING" | "NOT_STARTED" | "PENDING" | "HALTED" | "RUNNING" | "QUEUED" | "COMPLETED" | "FAILED";
        model_id: string;
        parameters: {
            batch_size: number;
            num_epochs: number;
        };
        created_at: string;
        id: string;
        name: string;
        method_id: string;
        model_name: string;
        task_id: string;
        validation_files?: {
            created_at: string;
            id: string;
            file_name: string;
        }[] | null | undefined;
        training_files?: {
            created_at: string;
            id: string;
            file_name: string;
        }[] | null | undefined;
        evaluation_files?: {
            created_at: string;
            id: string;
            file_name: string;
        }[] | null | undefined;
        datapoints?: {
            loss: {
                timestamp: string;
                data?: any;
            }[];
        } | null | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    results: {
        status: "INITIALIZING" | "NOT_STARTED" | "PENDING" | "HALTED" | "RUNNING" | "QUEUED" | "COMPLETED" | "FAILED";
        model_id: string;
        parameters: {
            batch_size: number;
            num_epochs: number;
        };
        created_at: string;
        id: string;
        name: string;
        method_id: string;
        model_name: string;
        task_id: string;
        validation_files?: {
            created_at: string;
            id: string;
            file_name: string;
        }[] | null | undefined;
        training_files?: {
            created_at: string;
            id: string;
            file_name: string;
        }[] | null | undefined;
        evaluation_files?: {
            created_at: string;
            id: string;
            file_name: string;
        }[] | null | undefined;
        datapoints?: {
            loss: {
                timestamp: string;
                data?: any;
            }[];
        } | null | undefined;
    };
}, {
    results: {
        status: "INITIALIZING" | "NOT_STARTED" | "PENDING" | "HALTED" | "RUNNING" | "QUEUED" | "COMPLETED" | "FAILED";
        model_id: string;
        parameters: {
            batch_size: number;
            num_epochs: number;
        };
        created_at: string;
        id: string;
        name: string;
        method_id: string;
        model_name: string;
        task_id: string;
        validation_files?: {
            created_at: string;
            id: string;
            file_name: string;
        }[] | null | undefined;
        training_files?: {
            created_at: string;
            id: string;
            file_name: string;
        }[] | null | undefined;
        evaluation_files?: {
            created_at: string;
            id: string;
            file_name: string;
        }[] | null | undefined;
        datapoints?: {
            loss: {
                timestamp: string;
                data?: any;
            }[];
        } | null | undefined;
    };
}>;
type TuneOutput$1 = z.output<typeof TuneOutputSchema$1>;
declare const TuneMethodsOutputSchema$1: z.ZodObject<{
    results: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        name: string;
    }, {
        id: string;
        name: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    results: {
        id: string;
        name: string;
    }[];
}, {
    results: {
        id: string;
        name: string;
    }[];
}>;
type TuneMethodsOutput$1 = z.output<typeof TuneMethodsOutputSchema$1>;
declare const PromptTemplateInputSchema$1: z.ZodObject<{
    id: z.ZodString;
}, "strict", z.ZodTypeAny, {
    id: string;
}, {
    id: string;
}>;
type PromptTemplateInput$1 = z.output<typeof PromptTemplateInputSchema$1>;
declare const PromptTemplateCreateInputSchema$1: z.ZodObject<{
    name: z.ZodString;
    value: z.ZodString;
}, "strict", z.ZodTypeAny, {
    value: string;
    name: string;
}, {
    value: string;
    name: string;
}>;
type PromptTemplateCreateInput$1 = z.input<typeof PromptTemplateCreateInputSchema$1>;
declare const PromptTemplateUpdateInputSchema$1: z.ZodObject<{
    name: z.ZodString;
    value: z.ZodString;
}, "strict", z.ZodTypeAny, {
    value: string;
    name: string;
}, {
    value: string;
    name: string;
}>;
type PromptTemplateUpdate = z.input<typeof PromptTemplateUpdateInputSchema$1>;
declare const PromptTemplateOutputSchema$1: z.ZodObject<{
    results: z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        value: z.ZodString;
        created_at: z.ZodDate;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        id: z.ZodString;
        name: z.ZodString;
        value: z.ZodString;
        created_at: z.ZodDate;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        id: z.ZodString;
        name: z.ZodString;
        value: z.ZodString;
        created_at: z.ZodDate;
    }, z.ZodTypeAny, "passthrough">>;
}, "strip", z.ZodTypeAny, {
    results: {
        value: string;
        created_at: Date;
        id: string;
        name: string;
    } & {
        [k: string]: unknown;
    };
}, {
    results: {
        value: string;
        created_at: Date;
        id: string;
        name: string;
    } & {
        [k: string]: unknown;
    };
}>;
type PromptTemplateOutput$1 = z.infer<typeof PromptTemplateOutputSchema$1>;
declare const PromptTemplatesOutputSchema$1: z.ZodObject<{
    totalCount: z.ZodNumber;
    results: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        value: z.ZodString;
        created_at: z.ZodDate;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        id: z.ZodString;
        name: z.ZodString;
        value: z.ZodString;
        created_at: z.ZodDate;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        id: z.ZodString;
        name: z.ZodString;
        value: z.ZodString;
        created_at: z.ZodDate;
    }, z.ZodTypeAny, "passthrough">>, "many">;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    totalCount: z.ZodNumber;
    results: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        value: z.ZodString;
        created_at: z.ZodDate;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        id: z.ZodString;
        name: z.ZodString;
        value: z.ZodString;
        created_at: z.ZodDate;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        id: z.ZodString;
        name: z.ZodString;
        value: z.ZodString;
        created_at: z.ZodDate;
    }, z.ZodTypeAny, "passthrough">>, "many">;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    totalCount: z.ZodNumber;
    results: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        value: z.ZodString;
        created_at: z.ZodDate;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        id: z.ZodString;
        name: z.ZodString;
        value: z.ZodString;
        created_at: z.ZodDate;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        id: z.ZodString;
        name: z.ZodString;
        value: z.ZodString;
        created_at: z.ZodDate;
    }, z.ZodTypeAny, "passthrough">>, "many">;
}, z.ZodTypeAny, "passthrough">>;
type PromptTemplatesOutput$1 = z.infer<typeof PromptTemplatesOutputSchema$1>;
declare const PromptTemplateExecuteInputSchema$1: z.ZodObject<{
    inputs: z.ZodArray<z.ZodString, "many">;
    template: z.ZodUnion<[z.ZodObject<{
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
    }, {
        id: string;
    }>, z.ZodObject<{
        value: z.ZodString;
        data: z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>;
    }, "strip", z.ZodTypeAny, {
        value: string;
        data: {} & {
            [k: string]: unknown;
        };
    }, {
        value: string;
        data: {} & {
            [k: string]: unknown;
        };
    }>]>;
}, "strip", z.ZodTypeAny, {
    inputs: string[];
    template: ({
        id: string;
    } | {
        value: string;
        data: {} & {
            [k: string]: unknown;
        };
    }) & ({
        id: string;
    } | {
        value: string;
        data: {} & {
            [k: string]: unknown;
        };
    } | undefined);
}, {
    inputs: string[];
    template: ({
        id: string;
    } | {
        value: string;
        data: {} & {
            [k: string]: unknown;
        };
    }) & ({
        id: string;
    } | {
        value: string;
        data: {} & {
            [k: string]: unknown;
        };
    } | undefined);
}>;
type PromptTemplateExecuteInput$1 = z.input<typeof PromptTemplateExecuteInputSchema$1>;
declare const PromptTemplateExecuteOutputSchema$1: z.ZodObject<{
    results: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    results: string[];
}, {
    results: string[];
}>;
type PromptTemplateExecuteOutput$1 = z.infer<typeof PromptTemplateExecuteOutputSchema$1>;
declare const HistoryStatusSchema$1: z.ZodEnum<["SUCCESS", "ERROR"]>;
type HistoryStatus$1 = z.infer<typeof HistoryStatusSchema$1>;
declare const HistoryOriginSchema$1: z.ZodEnum<["API", "UI"]>;
type HistoryOrigin$1 = z.infer<typeof HistoryOriginSchema$1>;
declare const HistoryInputSchema$1: z.ZodObject<{
    status: z.ZodOptional<z.ZodEnum<["SUCCESS", "ERROR"]>>;
    origin: z.ZodOptional<z.ZodEnum<["API", "UI"]>>;
}, "strip", z.ZodTypeAny, {
    status?: "ERROR" | "SUCCESS" | undefined;
    origin?: "API" | "UI" | undefined;
}, {
    status?: "ERROR" | "SUCCESS" | undefined;
    origin?: "API" | "UI" | undefined;
}>;
type HistoryInput$1 = z.input<typeof HistoryInputSchema$1>;
declare const HistoryOutputSchema$1: z.ZodObject<{
    totalCount: z.ZodNumber;
    results: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        duration: z.ZodNumber;
        request: z.ZodObject<{
            model_id: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
            prompt_id: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
            inputs: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            parameters: z.ZodOptional<z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>>;
            use_default: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
        }, "strip", z.ZodTypeAny, {
            model_id?: string | null | undefined;
            prompt_id?: string | null | undefined;
            inputs?: string[] | undefined;
            parameters?: Record<string, any> | undefined;
            use_default?: boolean | undefined;
        }, {
            model_id?: string | null | undefined;
            prompt_id?: string | null | undefined;
            inputs?: string[] | undefined;
            parameters?: Record<string, any> | undefined;
            use_default?: boolean | undefined;
        }>;
        status: z.ZodOptional<z.ZodEnum<["SUCCESS", "ERROR"]>>;
        created_at: z.ZodDate;
        response: z.ZodNullable<z.ZodObject<{
            model_id: z.ZodString;
            created_at: z.ZodDate;
            results: z.ZodArray<z.ZodObject<{
                generated_text: z.ZodString;
                generated_token_count: z.ZodNumber;
                input_token_count: z.ZodNumber;
                stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                generated_text: z.ZodString;
                generated_token_count: z.ZodNumber;
                input_token_count: z.ZodNumber;
                stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                generated_text: z.ZodString;
                generated_token_count: z.ZodNumber;
                input_token_count: z.ZodNumber;
                stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
            }, z.ZodTypeAny, "passthrough">>, "many">;
            moderation: z.ZodOptional<z.ZodObject<{
                hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">>, "many">>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">>, "many">>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">>, "many">>;
            }, z.ZodTypeAny, "passthrough">>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            model_id: z.ZodString;
            created_at: z.ZodDate;
            results: z.ZodArray<z.ZodObject<{
                generated_text: z.ZodString;
                generated_token_count: z.ZodNumber;
                input_token_count: z.ZodNumber;
                stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                generated_text: z.ZodString;
                generated_token_count: z.ZodNumber;
                input_token_count: z.ZodNumber;
                stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                generated_text: z.ZodString;
                generated_token_count: z.ZodNumber;
                input_token_count: z.ZodNumber;
                stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
            }, z.ZodTypeAny, "passthrough">>, "many">;
            moderation: z.ZodOptional<z.ZodObject<{
                hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">>, "many">>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">>, "many">>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">>, "many">>;
            }, z.ZodTypeAny, "passthrough">>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            model_id: z.ZodString;
            created_at: z.ZodDate;
            results: z.ZodArray<z.ZodObject<{
                generated_text: z.ZodString;
                generated_token_count: z.ZodNumber;
                input_token_count: z.ZodNumber;
                stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                generated_text: z.ZodString;
                generated_token_count: z.ZodNumber;
                input_token_count: z.ZodNumber;
                stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                generated_text: z.ZodString;
                generated_token_count: z.ZodNumber;
                input_token_count: z.ZodNumber;
                stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
            }, z.ZodTypeAny, "passthrough">>, "many">;
            moderation: z.ZodOptional<z.ZodObject<{
                hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">>, "many">>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">>, "many">>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">>, "many">>;
            }, z.ZodTypeAny, "passthrough">>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        id: z.ZodString;
        duration: z.ZodNumber;
        request: z.ZodObject<{
            model_id: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
            prompt_id: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
            inputs: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            parameters: z.ZodOptional<z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>>;
            use_default: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
        }, "strip", z.ZodTypeAny, {
            model_id?: string | null | undefined;
            prompt_id?: string | null | undefined;
            inputs?: string[] | undefined;
            parameters?: Record<string, any> | undefined;
            use_default?: boolean | undefined;
        }, {
            model_id?: string | null | undefined;
            prompt_id?: string | null | undefined;
            inputs?: string[] | undefined;
            parameters?: Record<string, any> | undefined;
            use_default?: boolean | undefined;
        }>;
        status: z.ZodOptional<z.ZodEnum<["SUCCESS", "ERROR"]>>;
        created_at: z.ZodDate;
        response: z.ZodNullable<z.ZodObject<{
            model_id: z.ZodString;
            created_at: z.ZodDate;
            results: z.ZodArray<z.ZodObject<{
                generated_text: z.ZodString;
                generated_token_count: z.ZodNumber;
                input_token_count: z.ZodNumber;
                stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                generated_text: z.ZodString;
                generated_token_count: z.ZodNumber;
                input_token_count: z.ZodNumber;
                stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                generated_text: z.ZodString;
                generated_token_count: z.ZodNumber;
                input_token_count: z.ZodNumber;
                stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
            }, z.ZodTypeAny, "passthrough">>, "many">;
            moderation: z.ZodOptional<z.ZodObject<{
                hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">>, "many">>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">>, "many">>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">>, "many">>;
            }, z.ZodTypeAny, "passthrough">>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            model_id: z.ZodString;
            created_at: z.ZodDate;
            results: z.ZodArray<z.ZodObject<{
                generated_text: z.ZodString;
                generated_token_count: z.ZodNumber;
                input_token_count: z.ZodNumber;
                stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                generated_text: z.ZodString;
                generated_token_count: z.ZodNumber;
                input_token_count: z.ZodNumber;
                stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                generated_text: z.ZodString;
                generated_token_count: z.ZodNumber;
                input_token_count: z.ZodNumber;
                stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
            }, z.ZodTypeAny, "passthrough">>, "many">;
            moderation: z.ZodOptional<z.ZodObject<{
                hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">>, "many">>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">>, "many">>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">>, "many">>;
            }, z.ZodTypeAny, "passthrough">>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            model_id: z.ZodString;
            created_at: z.ZodDate;
            results: z.ZodArray<z.ZodObject<{
                generated_text: z.ZodString;
                generated_token_count: z.ZodNumber;
                input_token_count: z.ZodNumber;
                stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                generated_text: z.ZodString;
                generated_token_count: z.ZodNumber;
                input_token_count: z.ZodNumber;
                stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                generated_text: z.ZodString;
                generated_token_count: z.ZodNumber;
                input_token_count: z.ZodNumber;
                stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
            }, z.ZodTypeAny, "passthrough">>, "many">;
            moderation: z.ZodOptional<z.ZodObject<{
                hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">>, "many">>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">>, "many">>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">>, "many">>;
            }, z.ZodTypeAny, "passthrough">>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        id: z.ZodString;
        duration: z.ZodNumber;
        request: z.ZodObject<{
            model_id: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
            prompt_id: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
            inputs: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            parameters: z.ZodOptional<z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>>;
            use_default: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
        }, "strip", z.ZodTypeAny, {
            model_id?: string | null | undefined;
            prompt_id?: string | null | undefined;
            inputs?: string[] | undefined;
            parameters?: Record<string, any> | undefined;
            use_default?: boolean | undefined;
        }, {
            model_id?: string | null | undefined;
            prompt_id?: string | null | undefined;
            inputs?: string[] | undefined;
            parameters?: Record<string, any> | undefined;
            use_default?: boolean | undefined;
        }>;
        status: z.ZodOptional<z.ZodEnum<["SUCCESS", "ERROR"]>>;
        created_at: z.ZodDate;
        response: z.ZodNullable<z.ZodObject<{
            model_id: z.ZodString;
            created_at: z.ZodDate;
            results: z.ZodArray<z.ZodObject<{
                generated_text: z.ZodString;
                generated_token_count: z.ZodNumber;
                input_token_count: z.ZodNumber;
                stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                generated_text: z.ZodString;
                generated_token_count: z.ZodNumber;
                input_token_count: z.ZodNumber;
                stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                generated_text: z.ZodString;
                generated_token_count: z.ZodNumber;
                input_token_count: z.ZodNumber;
                stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
            }, z.ZodTypeAny, "passthrough">>, "many">;
            moderation: z.ZodOptional<z.ZodObject<{
                hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">>, "many">>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">>, "many">>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">>, "many">>;
            }, z.ZodTypeAny, "passthrough">>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            model_id: z.ZodString;
            created_at: z.ZodDate;
            results: z.ZodArray<z.ZodObject<{
                generated_text: z.ZodString;
                generated_token_count: z.ZodNumber;
                input_token_count: z.ZodNumber;
                stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                generated_text: z.ZodString;
                generated_token_count: z.ZodNumber;
                input_token_count: z.ZodNumber;
                stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                generated_text: z.ZodString;
                generated_token_count: z.ZodNumber;
                input_token_count: z.ZodNumber;
                stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
            }, z.ZodTypeAny, "passthrough">>, "many">;
            moderation: z.ZodOptional<z.ZodObject<{
                hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">>, "many">>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">>, "many">>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">>, "many">>;
            }, z.ZodTypeAny, "passthrough">>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            model_id: z.ZodString;
            created_at: z.ZodDate;
            results: z.ZodArray<z.ZodObject<{
                generated_text: z.ZodString;
                generated_token_count: z.ZodNumber;
                input_token_count: z.ZodNumber;
                stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                generated_text: z.ZodString;
                generated_token_count: z.ZodNumber;
                input_token_count: z.ZodNumber;
                stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                generated_text: z.ZodString;
                generated_token_count: z.ZodNumber;
                input_token_count: z.ZodNumber;
                stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
            }, z.ZodTypeAny, "passthrough">>, "many">;
            moderation: z.ZodOptional<z.ZodObject<{
                hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">>, "many">>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">>, "many">>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">>, "many">>;
            }, z.ZodTypeAny, "passthrough">>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">>, "many">;
}, "strip", z.ZodTypeAny, {
    totalCount: number;
    results: z.objectOutputType<{
        id: z.ZodString;
        duration: z.ZodNumber;
        request: z.ZodObject<{
            model_id: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
            prompt_id: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
            inputs: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            parameters: z.ZodOptional<z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>>;
            use_default: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
        }, "strip", z.ZodTypeAny, {
            model_id?: string | null | undefined;
            prompt_id?: string | null | undefined;
            inputs?: string[] | undefined;
            parameters?: Record<string, any> | undefined;
            use_default?: boolean | undefined;
        }, {
            model_id?: string | null | undefined;
            prompt_id?: string | null | undefined;
            inputs?: string[] | undefined;
            parameters?: Record<string, any> | undefined;
            use_default?: boolean | undefined;
        }>;
        status: z.ZodOptional<z.ZodEnum<["SUCCESS", "ERROR"]>>;
        created_at: z.ZodDate;
        response: z.ZodNullable<z.ZodObject<{
            model_id: z.ZodString;
            created_at: z.ZodDate;
            results: z.ZodArray<z.ZodObject<{
                generated_text: z.ZodString;
                generated_token_count: z.ZodNumber;
                input_token_count: z.ZodNumber;
                stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                generated_text: z.ZodString;
                generated_token_count: z.ZodNumber;
                input_token_count: z.ZodNumber;
                stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                generated_text: z.ZodString;
                generated_token_count: z.ZodNumber;
                input_token_count: z.ZodNumber;
                stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
            }, z.ZodTypeAny, "passthrough">>, "many">;
            moderation: z.ZodOptional<z.ZodObject<{
                hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">>, "many">>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">>, "many">>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">>, "many">>;
            }, z.ZodTypeAny, "passthrough">>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            model_id: z.ZodString;
            created_at: z.ZodDate;
            results: z.ZodArray<z.ZodObject<{
                generated_text: z.ZodString;
                generated_token_count: z.ZodNumber;
                input_token_count: z.ZodNumber;
                stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                generated_text: z.ZodString;
                generated_token_count: z.ZodNumber;
                input_token_count: z.ZodNumber;
                stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                generated_text: z.ZodString;
                generated_token_count: z.ZodNumber;
                input_token_count: z.ZodNumber;
                stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
            }, z.ZodTypeAny, "passthrough">>, "many">;
            moderation: z.ZodOptional<z.ZodObject<{
                hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">>, "many">>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">>, "many">>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">>, "many">>;
            }, z.ZodTypeAny, "passthrough">>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            model_id: z.ZodString;
            created_at: z.ZodDate;
            results: z.ZodArray<z.ZodObject<{
                generated_text: z.ZodString;
                generated_token_count: z.ZodNumber;
                input_token_count: z.ZodNumber;
                stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                generated_text: z.ZodString;
                generated_token_count: z.ZodNumber;
                input_token_count: z.ZodNumber;
                stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                generated_text: z.ZodString;
                generated_token_count: z.ZodNumber;
                input_token_count: z.ZodNumber;
                stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
            }, z.ZodTypeAny, "passthrough">>, "many">;
            moderation: z.ZodOptional<z.ZodObject<{
                hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">>, "many">>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">>, "many">>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">>, "many">>;
            }, z.ZodTypeAny, "passthrough">>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">[];
}, {
    totalCount: number;
    results: z.objectInputType<{
        id: z.ZodString;
        duration: z.ZodNumber;
        request: z.ZodObject<{
            model_id: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
            prompt_id: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
            inputs: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            parameters: z.ZodOptional<z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>>;
            use_default: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
        }, "strip", z.ZodTypeAny, {
            model_id?: string | null | undefined;
            prompt_id?: string | null | undefined;
            inputs?: string[] | undefined;
            parameters?: Record<string, any> | undefined;
            use_default?: boolean | undefined;
        }, {
            model_id?: string | null | undefined;
            prompt_id?: string | null | undefined;
            inputs?: string[] | undefined;
            parameters?: Record<string, any> | undefined;
            use_default?: boolean | undefined;
        }>;
        status: z.ZodOptional<z.ZodEnum<["SUCCESS", "ERROR"]>>;
        created_at: z.ZodDate;
        response: z.ZodNullable<z.ZodObject<{
            model_id: z.ZodString;
            created_at: z.ZodDate;
            results: z.ZodArray<z.ZodObject<{
                generated_text: z.ZodString;
                generated_token_count: z.ZodNumber;
                input_token_count: z.ZodNumber;
                stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                generated_text: z.ZodString;
                generated_token_count: z.ZodNumber;
                input_token_count: z.ZodNumber;
                stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                generated_text: z.ZodString;
                generated_token_count: z.ZodNumber;
                input_token_count: z.ZodNumber;
                stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
            }, z.ZodTypeAny, "passthrough">>, "many">;
            moderation: z.ZodOptional<z.ZodObject<{
                hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">>, "many">>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">>, "many">>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">>, "many">>;
            }, z.ZodTypeAny, "passthrough">>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            model_id: z.ZodString;
            created_at: z.ZodDate;
            results: z.ZodArray<z.ZodObject<{
                generated_text: z.ZodString;
                generated_token_count: z.ZodNumber;
                input_token_count: z.ZodNumber;
                stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                generated_text: z.ZodString;
                generated_token_count: z.ZodNumber;
                input_token_count: z.ZodNumber;
                stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                generated_text: z.ZodString;
                generated_token_count: z.ZodNumber;
                input_token_count: z.ZodNumber;
                stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
            }, z.ZodTypeAny, "passthrough">>, "many">;
            moderation: z.ZodOptional<z.ZodObject<{
                hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">>, "many">>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">>, "many">>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">>, "many">>;
            }, z.ZodTypeAny, "passthrough">>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            model_id: z.ZodString;
            created_at: z.ZodDate;
            results: z.ZodArray<z.ZodObject<{
                generated_text: z.ZodString;
                generated_token_count: z.ZodNumber;
                input_token_count: z.ZodNumber;
                stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                generated_text: z.ZodString;
                generated_token_count: z.ZodNumber;
                input_token_count: z.ZodNumber;
                stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                generated_text: z.ZodString;
                generated_token_count: z.ZodNumber;
                input_token_count: z.ZodNumber;
                stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
            }, z.ZodTypeAny, "passthrough">>, "many">;
            moderation: z.ZodOptional<z.ZodObject<{
                hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">>, "many">>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">>, "many">>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    success: z.ZodBoolean;
                    flagged: z.ZodBoolean;
                    score: z.ZodNumber;
                    position: z.ZodObject<{
                        start: z.ZodNumber;
                        stop: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        start: number;
                        stop: number;
                    }, {
                        start: number;
                        stop: number;
                    }>;
                }, z.ZodTypeAny, "passthrough">>, "many">>;
            }, z.ZodTypeAny, "passthrough">>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">[];
}>;
type HistoryOutput$1 = z.infer<typeof HistoryOutputSchema$1>;
declare const FilePurposeSchema$1: z.ZodEnum<["tune", "template", "tune_import"]>;
type FilePurpose = z.infer<typeof FilePurposeSchema$1>;
declare const FileInputSchema$1: z.ZodObject<{
    id: z.ZodString;
}, "strict", z.ZodTypeAny, {
    id: string;
}, {
    id: string;
}>;
type FileInput$1 = z.input<typeof FileInputSchema$1>;
declare const FileCreateInputSchema$1: z.ZodType<FormData, z.ZodTypeDef, FormData>;
type FileCreateInput$1 = z.input<typeof FileCreateInputSchema$1>;
declare const FileOutputSchema$1: z.ZodObject<{
    results: z.ZodObject<{
        id: z.ZodString;
        file_name: z.ZodString;
        purpose: z.ZodEnum<["tune", "template", "tune_import"]>;
        created_at: z.ZodDate;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        id: z.ZodString;
        file_name: z.ZodString;
        purpose: z.ZodEnum<["tune", "template", "tune_import"]>;
        created_at: z.ZodDate;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        id: z.ZodString;
        file_name: z.ZodString;
        purpose: z.ZodEnum<["tune", "template", "tune_import"]>;
        created_at: z.ZodDate;
    }, z.ZodTypeAny, "passthrough">>;
}, "strip", z.ZodTypeAny, {
    results: {
        created_at: Date;
        id: string;
        file_name: string;
        purpose: "template" | "tune" | "tune_import";
    } & {
        [k: string]: unknown;
    };
}, {
    results: {
        created_at: Date;
        id: string;
        file_name: string;
        purpose: "template" | "tune" | "tune_import";
    } & {
        [k: string]: unknown;
    };
}>;
type FileOutput$1 = z.output<typeof FileOutputSchema$1>;
declare const FilesOutputSchema$1: z.ZodObject<{
    totalCount: z.ZodNumber;
    results: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        file_name: z.ZodString;
        purpose: z.ZodEnum<["tune", "template", "tune_import"]>;
        created_at: z.ZodDate;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        id: z.ZodString;
        file_name: z.ZodString;
        purpose: z.ZodEnum<["tune", "template", "tune_import"]>;
        created_at: z.ZodDate;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        id: z.ZodString;
        file_name: z.ZodString;
        purpose: z.ZodEnum<["tune", "template", "tune_import"]>;
        created_at: z.ZodDate;
    }, z.ZodTypeAny, "passthrough">>, "many">;
}, "strip", z.ZodTypeAny, {
    totalCount: number;
    results: z.objectOutputType<{
        id: z.ZodString;
        file_name: z.ZodString;
        purpose: z.ZodEnum<["tune", "template", "tune_import"]>;
        created_at: z.ZodDate;
    }, z.ZodTypeAny, "passthrough">[];
}, {
    totalCount: number;
    results: z.objectInputType<{
        id: z.ZodString;
        file_name: z.ZodString;
        purpose: z.ZodEnum<["tune", "template", "tune_import"]>;
        created_at: z.ZodDate;
    }, z.ZodTypeAny, "passthrough">[];
}>;
type FilesOutput$1 = z.output<typeof FilesOutputSchema$1>;
declare const ChatRoleSchema: z.ZodEnum<["user", "system", "assistant"]>;
type ChatRole = z.infer<typeof ChatRoleSchema>;
declare const ChatInputSchema$1: z.ZodObject<{
    model_id: z.ZodString;
    messages: z.ZodArray<z.ZodObject<{
        role: z.ZodEnum<["user", "system", "assistant"]>;
        content: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        role: "user" | "system" | "assistant";
        content: string;
    }, {
        role: "user" | "system" | "assistant";
        content: string;
    }>, "many">;
    conversation_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    parent_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    prompt_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    parameters: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
}, "strip", z.ZodTypeAny, {
    model_id: string;
    messages: {
        role: "user" | "system" | "assistant";
        content: string;
    }[];
    conversation_id?: string | null | undefined;
    parent_id?: string | null | undefined;
    prompt_id?: string | null | undefined;
    parameters?: Record<string, any> | null | undefined;
}, {
    model_id: string;
    messages: {
        role: "user" | "system" | "assistant";
        content: string;
    }[];
    conversation_id?: string | null | undefined;
    parent_id?: string | null | undefined;
    prompt_id?: string | null | undefined;
    parameters?: Record<string, any> | null | undefined;
}>;
type ChatInput$1 = z.input<typeof ChatInputSchema$1>;
declare const ChatOutputSchema$1: z.ZodObject<{
    conversation_id: z.ZodString;
    results: z.ZodArray<z.ZodObject<{
        generated_text: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        generated_text?: string | undefined;
    }, {
        generated_text?: string | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    results: {
        generated_text?: string | undefined;
    }[];
    conversation_id: string;
}, {
    results: {
        generated_text?: string | undefined;
    }[];
    conversation_id: string;
}>;
type ChatOutput$1 = z.output<typeof ChatOutputSchema$1>;
declare const ChatStreamInputSchema$1: z.ZodObject<{
    model_id: z.ZodString;
    messages: z.ZodArray<z.ZodObject<{
        role: z.ZodEnum<["user", "system", "assistant"]>;
        content: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        role: "user" | "system" | "assistant";
        content: string;
    }, {
        role: "user" | "system" | "assistant";
        content: string;
    }>, "many">;
    conversation_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    parent_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    prompt_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    parameters: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
}, "strip", z.ZodTypeAny, {
    model_id: string;
    messages: {
        role: "user" | "system" | "assistant";
        content: string;
    }[];
    conversation_id?: string | null | undefined;
    parent_id?: string | null | undefined;
    prompt_id?: string | null | undefined;
    parameters?: Record<string, any> | null | undefined;
}, {
    model_id: string;
    messages: {
        role: "user" | "system" | "assistant";
        content: string;
    }[];
    conversation_id?: string | null | undefined;
    parent_id?: string | null | undefined;
    prompt_id?: string | null | undefined;
    parameters?: Record<string, any> | null | undefined;
}>;
type ChatStreamInput$1 = z.input<typeof ChatStreamInputSchema$1>;
declare const ChatStreamOutputSchema$1: z.ZodObject<{
    conversation_id: z.ZodString;
    results: z.ZodArray<z.ZodObject<{
        generated_text: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        generated_text?: string | undefined;
    }, {
        generated_text?: string | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    results: {
        generated_text?: string | undefined;
    }[];
    conversation_id: string;
}, {
    results: {
        generated_text?: string | undefined;
    }[];
    conversation_id: string;
}>;
type ChatStreamOutput$1 = z.output<typeof ChatStreamOutputSchema$1>;

type apiTypes_ChatRole = ChatRole;
declare const apiTypes_ChatRoleSchema: typeof ChatRoleSchema;
type apiTypes_ErrorExtensions = ErrorExtensions;
type apiTypes_ErrorResponse = ErrorResponse;
type apiTypes_FilePurpose = FilePurpose;
declare const apiTypes_GenerateOutputSchema: typeof GenerateOutputSchema;
type apiTypes_GenerateResult = GenerateResult;
declare const apiTypes_GenerateResultSchema: typeof GenerateResultSchema;
type apiTypes_GenerateStopReason = GenerateStopReason;
declare const apiTypes_GenerateStopReasonSchema: typeof GenerateStopReasonSchema;
type apiTypes_PromptTemplateUpdate = PromptTemplateUpdate;
type apiTypes_TuneStatus = TuneStatus;
declare const apiTypes_TuneStatusSchema: typeof TuneStatusSchema;
type apiTypes_TunesOuput = TunesOuput;
type apiTypes_UserGenerateDefaultInput = UserGenerateDefaultInput;
declare const apiTypes_UserGenerateDefaultInputSchema: typeof UserGenerateDefaultInputSchema;
type apiTypes_UserGenerateDefaultOutput = UserGenerateDefaultOutput;
type apiTypes_UserOutput = UserOutput;
declare namespace apiTypes {
  export {
    ChatInput$1 as ChatInput,
    ChatInputSchema$1 as ChatInputSchema,
    ChatOutput$1 as ChatOutput,
    ChatOutputSchema$1 as ChatOutputSchema,
    apiTypes_ChatRole as ChatRole,
    apiTypes_ChatRoleSchema as ChatRoleSchema,
    ChatStreamInput$1 as ChatStreamInput,
    ChatStreamInputSchema$1 as ChatStreamInputSchema,
    ChatStreamOutput$1 as ChatStreamOutput,
    ChatStreamOutputSchema$1 as ChatStreamOutputSchema,
    apiTypes_ErrorExtensions as ErrorExtensions,
    apiTypes_ErrorResponse as ErrorResponse,
    FileCreateInput$1 as FileCreateInput,
    FileCreateInputSchema$1 as FileCreateInputSchema,
    FileInput$1 as FileInput,
    FileInputSchema$1 as FileInputSchema,
    FileOutput$1 as FileOutput,
    FileOutputSchema$1 as FileOutputSchema,
    apiTypes_FilePurpose as FilePurpose,
    FilePurposeSchema$1 as FilePurposeSchema,
    FilesOutput$1 as FilesOutput,
    FilesOutputSchema$1 as FilesOutputSchema,
    GenerateConfigInput$1 as GenerateConfigInput,
    GenerateConfigInputSchema$1 as GenerateConfigInputSchema,
    GenerateConfigOutput$1 as GenerateConfigOutput,
    GenerateConfigOutputSchema$1 as GenerateConfigOutputSchema,
    GenerateInput$1 as GenerateInput,
    GenerateInputSchema$1 as GenerateInputSchema,
    GenerateLimitsOutput$1 as GenerateLimitsOutput,
    GenerateLimitsOutputSchema$1 as GenerateLimitsOutputSchema,
    GenerateOutput$1 as GenerateOutput,
    apiTypes_GenerateOutputSchema as GenerateOutputSchema,
    apiTypes_GenerateResult as GenerateResult,
    apiTypes_GenerateResultSchema as GenerateResultSchema,
    apiTypes_GenerateStopReason as GenerateStopReason,
    apiTypes_GenerateStopReasonSchema as GenerateStopReasonSchema,
    HistoryInput$1 as HistoryInput,
    HistoryInputSchema$1 as HistoryInputSchema,
    HistoryOrigin$1 as HistoryOrigin,
    HistoryOriginSchema$1 as HistoryOriginSchema,
    HistoryOutput$1 as HistoryOutput,
    HistoryOutputSchema$1 as HistoryOutputSchema,
    HistoryStatus$1 as HistoryStatus,
    HistoryStatusSchema$1 as HistoryStatusSchema,
    ModelOutput$1 as ModelOutput,
    ModelOutputSchema$1 as ModelOutputSchema,
    ModelsOutput$1 as ModelsOutput,
    ModelsOutputSchema$1 as ModelsOutputSchema,
    PromptTemplateCreateInput$1 as PromptTemplateCreateInput,
    PromptTemplateCreateInputSchema$1 as PromptTemplateCreateInputSchema,
    PromptTemplateExecuteInput$1 as PromptTemplateExecuteInput,
    PromptTemplateExecuteInputSchema$1 as PromptTemplateExecuteInputSchema,
    PromptTemplateExecuteOutput$1 as PromptTemplateExecuteOutput,
    PromptTemplateExecuteOutputSchema$1 as PromptTemplateExecuteOutputSchema,
    PromptTemplateInput$1 as PromptTemplateInput,
    PromptTemplateInputSchema$1 as PromptTemplateInputSchema,
    PromptTemplateOutput$1 as PromptTemplateOutput,
    PromptTemplateOutputSchema$1 as PromptTemplateOutputSchema,
    apiTypes_PromptTemplateUpdate as PromptTemplateUpdate,
    PromptTemplateUpdateInputSchema$1 as PromptTemplateUpdateInputSchema,
    PromptTemplatesOutput$1 as PromptTemplatesOutput,
    PromptTemplatesOutputSchema$1 as PromptTemplatesOutputSchema,
    TokenizeInput$1 as TokenizeInput,
    TokenizeInputSchema$1 as TokenizeInputSchema,
    TokenizeOutput$1 as TokenizeOutput,
    TokenizeOutputSchema$1 as TokenizeOutputSchema,
    TuneInput$1 as TuneInput,
    TuneInputSchema$1 as TuneInputSchema,
    TuneMethodsOutput$1 as TuneMethodsOutput,
    TuneMethodsOutputSchema$1 as TuneMethodsOutputSchema,
    TuneOutput$1 as TuneOutput,
    TuneOutputSchema$1 as TuneOutputSchema,
    apiTypes_TuneStatus as TuneStatus,
    apiTypes_TuneStatusSchema as TuneStatusSchema,
    apiTypes_TunesOuput as TunesOuput,
    apiTypes_UserGenerateDefaultInput as UserGenerateDefaultInput,
    apiTypes_UserGenerateDefaultInputSchema as UserGenerateDefaultInputSchema,
    apiTypes_UserGenerateDefaultOutput as UserGenerateDefaultOutput,
    apiTypes_UserOutput as UserOutput,
  };
}

interface HttpHandlerOptions {
    timeout?: number;
    signal?: AbortSignal;
    retries?: number;
}
type HttpHandlerNoStreamOptions = HttpHandlerOptions & FlagOption<'stream', false>;
type HttpHandlerStreamOptions = HttpHandlerOptions & FlagOption<'stream', true>;
declare const GenerateInputSchema: z.ZodUnion<[z.ZodObject<{
    parameters: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
    input: z.ZodString;
    model_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    prompt_id: z.ZodOptional<z.ZodNever>;
}, "strip", z.ZodTypeAny, {
    input: string;
    parameters?: Record<string, any> | undefined;
    model_id?: string | null | undefined;
    prompt_id?: undefined;
}, {
    input: string;
    parameters?: Record<string, any> | undefined;
    model_id?: string | null | undefined;
    prompt_id?: undefined;
}>, z.ZodObject<{
    parameters: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
    input: z.ZodString;
    prompt_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    model_id: z.ZodOptional<z.ZodNever>;
}, "strip", z.ZodTypeAny, {
    input: string;
    parameters?: Record<string, any> | undefined;
    prompt_id?: string | null | undefined;
    model_id?: undefined;
}, {
    input: string;
    parameters?: Record<string, any> | undefined;
    prompt_id?: string | null | undefined;
    model_id?: undefined;
}>]>;
type GenerateInput = z.infer<typeof GenerateInputSchema>;
type GenerateOutput = GenerateOutput$1['results'][number] & {
    moderation?: GenerateOutput$1['moderation'];
};
declare const GenerateConfigInputSchema: z.ZodObject<{
    model_id: z.ZodOptional<z.ZodString>;
    parameters: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
}, "strip", z.ZodTypeAny, {
    model_id?: string | undefined;
    parameters?: Record<string, any> | undefined;
}, {
    model_id?: string | undefined;
    parameters?: Record<string, any> | undefined;
}>;
type GenerateConfigInput = z.input<typeof GenerateConfigInputSchema>;
declare const GenerateConfigOutputSchema: z.ZodObject<{
    model_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    parameters: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
}, "strip", z.ZodTypeAny, {
    model_id?: string | null | undefined;
    parameters?: Record<string, any> | null | undefined;
}, {
    model_id?: string | null | undefined;
    parameters?: Record<string, any> | null | undefined;
}>;
type GenerateConfigOutput = z.output<typeof GenerateConfigOutputSchema>;
type GenerateConfigOptions = HttpHandlerOptions & {
    reset?: boolean;
};
type GenerateConfigInputOptions = HttpHandlerOptions & {
    strategy: 'merge' | 'replace';
};
declare const GenerateLimitsInputSchema: z.ZodNever;
type GenerateLimitsInput = z.input<typeof GenerateLimitsInputSchema>;
declare const GenerateLimitsOutputSchema: z.ZodObject<{
    tokenCapacity: z.ZodNumber;
    tokensUsed: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    tokenCapacity: number;
    tokensUsed: number;
}, {
    tokenCapacity: number;
    tokensUsed: number;
}>;
type GenerateLimitsOutput = z.output<typeof GenerateLimitsOutputSchema>;
declare const TokenizeInputSchema: z.ZodObject<{
    model_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    parameters: z.ZodOptional<z.ZodObject<{
        return_tokens: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        return_tokens?: boolean | undefined;
    }, {
        return_tokens?: boolean | undefined;
    }>>;
    use_default: z.ZodOptional<z.ZodBoolean>;
    input: z.ZodString;
}, "strip", z.ZodTypeAny, {
    input: string;
    model_id?: string | null | undefined;
    parameters?: {
        return_tokens?: boolean | undefined;
    } | undefined;
    use_default?: boolean | undefined;
}, {
    input: string;
    model_id?: string | null | undefined;
    parameters?: {
        return_tokens?: boolean | undefined;
    } | undefined;
    use_default?: boolean | undefined;
}>;
type TokenizeInput = z.infer<typeof TokenizeInputSchema>;
declare const TokenizeOutputSchema: z.ZodObject<{
    token_count: z.ZodNumber;
    tokens: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    token_count: number;
    tokens: string[];
}, {
    token_count: number;
    tokens: string[];
}>;
type TokenizeOutput = z.output<typeof TokenizeOutputSchema>;
declare const ModelsInputSchema: z.ZodNever;
type ModelsInput = z.infer<typeof ModelsInputSchema>;
declare const ModelsOutputSchema: z.ZodArray<z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    size: z.ZodString;
    token_limit: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    id: string;
    name: string;
    size: string;
    token_limit: number;
}, {
    id: string;
    name: string;
    size: string;
    token_limit: number;
}>, "many">;
type ModelsOutput = z.output<typeof ModelsOutputSchema>;
declare const ModelInputSchema: z.ZodObject<{
    id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
}, {
    id: string;
}>;
type ModelInput = z.infer<typeof ModelInputSchema>;
declare const ModelOutputSchema: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    size: z.ZodString;
    description: z.ZodString;
    token_limit: z.ZodNumber;
    tags: z.ZodArray<z.ZodString, "many">;
    source_model_id: z.ZodNullable<z.ZodString>;
    tasks: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        json_example: z.ZodString;
        jsonl_example: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        name: string;
        json_example: string;
        jsonl_example: string;
    }, {
        id: string;
        name: string;
        json_example: string;
        jsonl_example: string;
    }>, "many">;
    model_family: z.ZodObject<{
        id: z.ZodNumber;
        name: z.ZodString;
        short_description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        id: number;
        name: string;
        short_description?: string | null | undefined;
        description?: string | null | undefined;
    }, {
        id: number;
        name: string;
        short_description?: string | null | undefined;
        description?: string | null | undefined;
    }>;
    schema_generate: z.ZodObject<{
        id: z.ZodNumber;
        value: z.ZodAny;
    }, "strip", z.ZodTypeAny, {
        id: number;
        value?: any;
    }, {
        id: number;
        value?: any;
    }>;
    schema_tokenize: z.ZodObject<{
        id: z.ZodNumber;
        value: z.ZodAny;
    }, "strip", z.ZodTypeAny, {
        id: number;
        value?: any;
    }, {
        id: number;
        value?: any;
    }>;
}, "strip", z.ZodTypeAny, {
    id: string;
    name: string;
    size: string;
    token_limit: number;
    description: string;
    tags: string[];
    source_model_id: string | null;
    tasks: {
        id: string;
        name: string;
        json_example: string;
        jsonl_example: string;
    }[];
    model_family: {
        id: number;
        name: string;
        short_description?: string | null | undefined;
        description?: string | null | undefined;
    };
    schema_generate: {
        id: number;
        value?: any;
    };
    schema_tokenize: {
        id: number;
        value?: any;
    };
}, {
    id: string;
    name: string;
    size: string;
    token_limit: number;
    description: string;
    tags: string[];
    source_model_id: string | null;
    tasks: {
        id: string;
        name: string;
        json_example: string;
        jsonl_example: string;
    }[];
    model_family: {
        id: number;
        name: string;
        short_description?: string | null | undefined;
        description?: string | null | undefined;
    };
    schema_generate: {
        id: number;
        value?: any;
    };
    schema_tokenize: {
        id: number;
        value?: any;
    };
}>;
type ModelOutput = z.output<typeof ModelOutputSchema>;
declare const TunesInputSchema: z.ZodObject<{
    filters: z.ZodOptional<z.ZodIntersection<z.ZodObject<{
        offset: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        count: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        offset?: number | null | undefined;
        count?: number | null | undefined;
    }, {
        offset?: number | null | undefined;
        count?: number | null | undefined;
    }>, z.ZodObject<{
        search: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        status: z.ZodOptional<z.ZodNullable<z.ZodEnum<["INITIALIZING", "NOT_STARTED", "PENDING", "HALTED", "RUNNING", "QUEUED", "COMPLETED", "FAILED"]>>>;
    }, "strip", z.ZodTypeAny, {
        search?: string | null | undefined;
        status?: "INITIALIZING" | "NOT_STARTED" | "PENDING" | "HALTED" | "RUNNING" | "QUEUED" | "COMPLETED" | "FAILED" | null | undefined;
    }, {
        search?: string | null | undefined;
        status?: "INITIALIZING" | "NOT_STARTED" | "PENDING" | "HALTED" | "RUNNING" | "QUEUED" | "COMPLETED" | "FAILED" | null | undefined;
    }>>>;
}, "strip", z.ZodTypeAny, {
    filters?: ({
        offset?: number | null | undefined;
        count?: number | null | undefined;
    } & {
        search?: string | null | undefined;
        status?: "INITIALIZING" | "NOT_STARTED" | "PENDING" | "HALTED" | "RUNNING" | "QUEUED" | "COMPLETED" | "FAILED" | null | undefined;
    }) | undefined;
}, {
    filters?: ({
        offset?: number | null | undefined;
        count?: number | null | undefined;
    } & {
        search?: string | null | undefined;
        status?: "INITIALIZING" | "NOT_STARTED" | "PENDING" | "HALTED" | "RUNNING" | "QUEUED" | "COMPLETED" | "FAILED" | null | undefined;
    }) | undefined;
}>;
type TunesInput = z.infer<typeof TunesInputSchema>;
type TunesOutput = TunesOuput['results'][number];
type TuneAssetType = z.infer<typeof TuneAssetTypeSchema>;
declare const TuneAssetTypeSchema: z.ZodEnum<["encoder", "logs"]>;
declare const TuneInputSchema: z.ZodObject<{
    id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
}, {
    id: string;
}>;
type TuneInput = z.infer<typeof TuneInputSchema>;
type TuneOptions = HttpHandlerOptions & {
    delete?: boolean;
};
declare const TuneCreateInputSchema: z.ZodObject<{
    name: z.ZodString;
    model_id: z.ZodString;
    task_id: z.ZodString;
    training_file_ids: z.ZodArray<z.ZodString, "many">;
    validation_file_ids: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    evaluation_file_ids: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    method_id: z.ZodString;
    parameters: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
}, "strip", z.ZodTypeAny, {
    model_id: string;
    name: string;
    method_id: string;
    task_id: string;
    training_file_ids: string[];
    validation_file_ids?: string[] | null | undefined;
    evaluation_file_ids?: string[] | null | undefined;
    parameters?: Record<string, any> | null | undefined;
}, {
    model_id: string;
    name: string;
    method_id: string;
    task_id: string;
    training_file_ids: string[];
    validation_file_ids?: string[] | null | undefined;
    evaluation_file_ids?: string[] | null | undefined;
    parameters?: Record<string, any> | null | undefined;
}>;
type TuneCreateInput = z.infer<typeof TuneCreateInputSchema>;
type TuneCreateOptions = HttpHandlerOptions;
declare const TuneOutputSchema: z.ZodUnion<[z.ZodObject<{
    model_id: z.ZodString;
    parameters: z.ZodObject<{
        batch_size: z.ZodNumber;
        num_epochs: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        batch_size: number;
        num_epochs: number;
    }, {
        batch_size: number;
        num_epochs: number;
    }>;
    created_at: z.ZodString;
    id: z.ZodString;
    name: z.ZodString;
    method_id: z.ZodString;
    model_name: z.ZodString;
    task_id: z.ZodString;
    validation_files: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        file_name: z.ZodString;
        created_at: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        created_at: string;
        id: string;
        file_name: string;
    }, {
        created_at: string;
        id: string;
        file_name: string;
    }>, "many">>>;
    training_files: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        file_name: z.ZodString;
        created_at: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        created_at: string;
        id: string;
        file_name: string;
    }, {
        created_at: string;
        id: string;
        file_name: string;
    }>, "many">>>;
    evaluation_files: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        file_name: z.ZodString;
        created_at: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        created_at: string;
        id: string;
        file_name: string;
    }, {
        created_at: string;
        id: string;
        file_name: string;
    }>, "many">>>;
    datapoints: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        loss: z.ZodArray<z.ZodObject<{
            data: z.ZodAny;
            timestamp: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            timestamp: string;
            data?: any;
        }, {
            timestamp: string;
            data?: any;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        loss: {
            timestamp: string;
            data?: any;
        }[];
    }, {
        loss: {
            timestamp: string;
            data?: any;
        }[];
    }>>>;
    status: z.ZodEnum<["INITIALIZING", "NOT_STARTED", "PENDING", "HALTED", "RUNNING", "QUEUED", "FAILED"]>;
}, "strip", z.ZodTypeAny, {
    status: "INITIALIZING" | "NOT_STARTED" | "PENDING" | "HALTED" | "RUNNING" | "QUEUED" | "FAILED";
    model_id: string;
    parameters: {
        batch_size: number;
        num_epochs: number;
    };
    created_at: string;
    id: string;
    name: string;
    method_id: string;
    model_name: string;
    task_id: string;
    validation_files?: {
        created_at: string;
        id: string;
        file_name: string;
    }[] | null | undefined;
    training_files?: {
        created_at: string;
        id: string;
        file_name: string;
    }[] | null | undefined;
    evaluation_files?: {
        created_at: string;
        id: string;
        file_name: string;
    }[] | null | undefined;
    datapoints?: {
        loss: {
            timestamp: string;
            data?: any;
        }[];
    } | null | undefined;
}, {
    status: "INITIALIZING" | "NOT_STARTED" | "PENDING" | "HALTED" | "RUNNING" | "QUEUED" | "FAILED";
    model_id: string;
    parameters: {
        batch_size: number;
        num_epochs: number;
    };
    created_at: string;
    id: string;
    name: string;
    method_id: string;
    model_name: string;
    task_id: string;
    validation_files?: {
        created_at: string;
        id: string;
        file_name: string;
    }[] | null | undefined;
    training_files?: {
        created_at: string;
        id: string;
        file_name: string;
    }[] | null | undefined;
    evaluation_files?: {
        created_at: string;
        id: string;
        file_name: string;
    }[] | null | undefined;
    datapoints?: {
        loss: {
            timestamp: string;
            data?: any;
        }[];
    } | null | undefined;
}>, z.ZodIntersection<z.ZodObject<{
    model_id: z.ZodString;
    parameters: z.ZodObject<{
        batch_size: z.ZodNumber;
        num_epochs: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        batch_size: number;
        num_epochs: number;
    }, {
        batch_size: number;
        num_epochs: number;
    }>;
    created_at: z.ZodString;
    id: z.ZodString;
    name: z.ZodString;
    method_id: z.ZodString;
    model_name: z.ZodString;
    task_id: z.ZodString;
    validation_files: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        file_name: z.ZodString;
        created_at: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        created_at: string;
        id: string;
        file_name: string;
    }, {
        created_at: string;
        id: string;
        file_name: string;
    }>, "many">>>;
    training_files: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        file_name: z.ZodString;
        created_at: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        created_at: string;
        id: string;
        file_name: string;
    }, {
        created_at: string;
        id: string;
        file_name: string;
    }>, "many">>>;
    evaluation_files: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        file_name: z.ZodString;
        created_at: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        created_at: string;
        id: string;
        file_name: string;
    }, {
        created_at: string;
        id: string;
        file_name: string;
    }>, "many">>>;
    datapoints: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        loss: z.ZodArray<z.ZodObject<{
            data: z.ZodAny;
            timestamp: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            timestamp: string;
            data?: any;
        }, {
            timestamp: string;
            data?: any;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        loss: {
            timestamp: string;
            data?: any;
        }[];
    }, {
        loss: {
            timestamp: string;
            data?: any;
        }[];
    }>>>;
    status: z.ZodEnum<["COMPLETED"]>;
}, "strip", z.ZodTypeAny, {
    status: "COMPLETED";
    model_id: string;
    parameters: {
        batch_size: number;
        num_epochs: number;
    };
    created_at: string;
    id: string;
    name: string;
    method_id: string;
    model_name: string;
    task_id: string;
    validation_files?: {
        created_at: string;
        id: string;
        file_name: string;
    }[] | null | undefined;
    training_files?: {
        created_at: string;
        id: string;
        file_name: string;
    }[] | null | undefined;
    evaluation_files?: {
        created_at: string;
        id: string;
        file_name: string;
    }[] | null | undefined;
    datapoints?: {
        loss: {
            timestamp: string;
            data?: any;
        }[];
    } | null | undefined;
}, {
    status: "COMPLETED";
    model_id: string;
    parameters: {
        batch_size: number;
        num_epochs: number;
    };
    created_at: string;
    id: string;
    name: string;
    method_id: string;
    model_name: string;
    task_id: string;
    validation_files?: {
        created_at: string;
        id: string;
        file_name: string;
    }[] | null | undefined;
    training_files?: {
        created_at: string;
        id: string;
        file_name: string;
    }[] | null | undefined;
    evaluation_files?: {
        created_at: string;
        id: string;
        file_name: string;
    }[] | null | undefined;
    datapoints?: {
        loss: {
            timestamp: string;
            data?: any;
        }[];
    } | null | undefined;
}>, z.ZodObject<{
    downloadAsset: z.ZodFunction<z.ZodTuple<[z.ZodEnum<["encoder", "logs"]>], z.ZodUnknown>, z.ZodType<Promise<Readable$1>, z.ZodTypeDef, Promise<Readable$1>>>;
}, "strip", z.ZodTypeAny, {
    downloadAsset: (args_0: "encoder" | "logs", ...args_1: unknown[]) => Promise<Readable$1>;
}, {
    downloadAsset: (args_0: "encoder" | "logs", ...args_1: unknown[]) => Promise<Readable$1>;
}>>]>;
type TuneOutput = z.output<typeof TuneOutputSchema>;
declare const TuneDeleteOutputSchema: z.ZodVoid;
type TuneDeleteOutput = z.output<typeof TuneDeleteOutputSchema>;
declare const TuneMethodsInputSchema: z.ZodNever;
type TuneMethodsInput = z.infer<typeof TuneMethodsInputSchema>;
declare const TuneMethodsOutputSchema: z.ZodArray<z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
    name: string;
}, {
    id: string;
    name: string;
}>, "many">;
type TuneMethodsOutput = z.output<typeof TuneMethodsOutputSchema>;
declare const PromptTemplateInputSchema: z.ZodObject<{
    id: z.ZodString;
}, "strict", z.ZodTypeAny, {
    id: string;
}, {
    id: string;
}>;
type PromptTemplateInput = z.input<typeof PromptTemplateInputSchema>;
declare const PromptTemplateCreateInputSchema: z.ZodObject<{
    name: z.ZodString;
    value: z.ZodString;
}, "strict", z.ZodTypeAny, {
    value: string;
    name: string;
}, {
    value: string;
    name: string;
}>;
type PromptTemplateCreateInput = z.input<typeof PromptTemplateCreateInputSchema>;
declare const PromptTemplateUpdateInputSchema: z.ZodIntersection<z.ZodObject<{
    id: z.ZodString;
}, "strict", z.ZodTypeAny, {
    id: string;
}, {
    id: string;
}>, z.ZodObject<{
    name: z.ZodString;
    value: z.ZodString;
}, "strict", z.ZodTypeAny, {
    value: string;
    name: string;
}, {
    value: string;
    name: string;
}>>;
type PromptTemplateUpdateInput = z.input<typeof PromptTemplateUpdateInputSchema>;
declare const PromptTemplateOutputSchema: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    value: z.ZodString;
    created_at: z.ZodDate;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    id: z.ZodString;
    name: z.ZodString;
    value: z.ZodString;
    created_at: z.ZodDate;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    id: z.ZodString;
    name: z.ZodString;
    value: z.ZodString;
    created_at: z.ZodDate;
}, z.ZodTypeAny, "passthrough">>;
type PromptTemplateOutput = z.output<typeof PromptTemplateOutputSchema>;
declare const PromptTemplateDeleteOutputSchema: z.ZodVoid;
type PromptTemplateDeleteOutput = z.output<typeof PromptTemplateDeleteOutputSchema>;
declare const PromptTemplatesInputSchema: z.ZodObject<{
    offset: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    count: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    offset?: number | null | undefined;
    count?: number | null | undefined;
}, {
    offset?: number | null | undefined;
    count?: number | null | undefined;
}>;
type PromptTemplatesInput = z.input<typeof PromptTemplatesInputSchema>;
declare const PromptTemplatesOutputSchema: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    value: z.ZodString;
    created_at: z.ZodDate;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    id: z.ZodString;
    name: z.ZodString;
    value: z.ZodString;
    created_at: z.ZodDate;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    id: z.ZodString;
    name: z.ZodString;
    value: z.ZodString;
    created_at: z.ZodDate;
}, z.ZodTypeAny, "passthrough">>;
type PromptTemplatesOutput = z.output<typeof PromptTemplatesOutputSchema>;
type PromptTemplateOptions = HttpHandlerOptions & FlagOption<'delete', false>;
type PromptTemplateDeleteOptions = HttpHandlerOptions & FlagOption<'delete', true>;
declare const PromptTemplateExecuteInputSchema: z.ZodObject<{
    inputs: z.ZodArray<z.ZodString, "many">;
    template: z.ZodUnion<[z.ZodObject<{
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
    }, {
        id: string;
    }>, z.ZodObject<{
        value: z.ZodString;
        data: z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>;
    }, "strip", z.ZodTypeAny, {
        value: string;
        data: {} & {
            [k: string]: unknown;
        };
    }, {
        value: string;
        data: {} & {
            [k: string]: unknown;
        };
    }>]>;
}, "strip", z.ZodTypeAny, {
    inputs: string[];
    template: ({
        id: string;
    } | {
        value: string;
        data: {} & {
            [k: string]: unknown;
        };
    }) & ({
        id: string;
    } | {
        value: string;
        data: {} & {
            [k: string]: unknown;
        };
    } | undefined);
}, {
    inputs: string[];
    template: ({
        id: string;
    } | {
        value: string;
        data: {} & {
            [k: string]: unknown;
        };
    }) & ({
        id: string;
    } | {
        value: string;
        data: {} & {
            [k: string]: unknown;
        };
    } | undefined);
}>;
type PromptTemplateExecuteInput = z.input<typeof PromptTemplateExecuteInputSchema>;
declare const PromptTemplateExecuteOutputSchema: z.ZodArray<z.ZodString, "many">;
type PromptTemplateExecuteOutput = z.output<typeof PromptTemplateExecuteOutputSchema>;
type PromptTemplateExecuteOptions = HttpHandlerOptions;
declare const HistoryInputSchema: z.ZodIntersection<z.ZodObject<{
    offset: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    count: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    offset?: number | null | undefined;
    count?: number | null | undefined;
}, {
    offset?: number | null | undefined;
    count?: number | null | undefined;
}>, z.ZodObject<Pick<{
    status: z.ZodOptional<z.ZodEnum<["SUCCESS", "ERROR"]>>;
    origin: z.ZodOptional<z.ZodEnum<["API", "UI"]>>;
}, "status" | "origin">, "strip", z.ZodTypeAny, {
    status?: "ERROR" | "SUCCESS" | undefined;
    origin?: "API" | "UI" | undefined;
}, {
    status?: "ERROR" | "SUCCESS" | undefined;
    origin?: "API" | "UI" | undefined;
}>>;
type HistoryInput = z.input<typeof HistoryInputSchema>;
type HistoryOptions = HttpHandlerOptions;
declare const HistoryOutputSchema: z.ZodObject<{
    id: z.ZodString;
    duration: z.ZodNumber;
    request: z.ZodObject<{
        model_id: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
        prompt_id: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
        inputs: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        parameters: z.ZodOptional<z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>>;
        use_default: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
    }, "strip", z.ZodTypeAny, {
        model_id?: string | null | undefined;
        prompt_id?: string | null | undefined;
        inputs?: string[] | undefined;
        parameters?: Record<string, any> | undefined;
        use_default?: boolean | undefined;
    }, {
        model_id?: string | null | undefined;
        prompt_id?: string | null | undefined;
        inputs?: string[] | undefined;
        parameters?: Record<string, any> | undefined;
        use_default?: boolean | undefined;
    }>;
    status: z.ZodOptional<z.ZodEnum<["SUCCESS", "ERROR"]>>;
    created_at: z.ZodDate;
    response: z.ZodNullable<z.ZodObject<{
        model_id: z.ZodString;
        created_at: z.ZodDate;
        results: z.ZodArray<z.ZodObject<{
            generated_text: z.ZodString;
            generated_token_count: z.ZodNumber;
            input_token_count: z.ZodNumber;
            stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            generated_text: z.ZodString;
            generated_token_count: z.ZodNumber;
            input_token_count: z.ZodNumber;
            stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            generated_text: z.ZodString;
            generated_token_count: z.ZodNumber;
            input_token_count: z.ZodNumber;
            stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
        }, z.ZodTypeAny, "passthrough">>, "many">;
        moderation: z.ZodOptional<z.ZodObject<{
            hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, z.ZodTypeAny, "passthrough">>, "many">>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, z.ZodTypeAny, "passthrough">>, "many">>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, z.ZodTypeAny, "passthrough">>, "many">>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        model_id: z.ZodString;
        created_at: z.ZodDate;
        results: z.ZodArray<z.ZodObject<{
            generated_text: z.ZodString;
            generated_token_count: z.ZodNumber;
            input_token_count: z.ZodNumber;
            stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            generated_text: z.ZodString;
            generated_token_count: z.ZodNumber;
            input_token_count: z.ZodNumber;
            stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            generated_text: z.ZodString;
            generated_token_count: z.ZodNumber;
            input_token_count: z.ZodNumber;
            stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
        }, z.ZodTypeAny, "passthrough">>, "many">;
        moderation: z.ZodOptional<z.ZodObject<{
            hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, z.ZodTypeAny, "passthrough">>, "many">>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, z.ZodTypeAny, "passthrough">>, "many">>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, z.ZodTypeAny, "passthrough">>, "many">>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        model_id: z.ZodString;
        created_at: z.ZodDate;
        results: z.ZodArray<z.ZodObject<{
            generated_text: z.ZodString;
            generated_token_count: z.ZodNumber;
            input_token_count: z.ZodNumber;
            stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            generated_text: z.ZodString;
            generated_token_count: z.ZodNumber;
            input_token_count: z.ZodNumber;
            stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            generated_text: z.ZodString;
            generated_token_count: z.ZodNumber;
            input_token_count: z.ZodNumber;
            stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
        }, z.ZodTypeAny, "passthrough">>, "many">;
        moderation: z.ZodOptional<z.ZodObject<{
            hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, z.ZodTypeAny, "passthrough">>, "many">>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, z.ZodTypeAny, "passthrough">>, "many">>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, z.ZodTypeAny, "passthrough">>, "many">>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">>>;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    id: z.ZodString;
    duration: z.ZodNumber;
    request: z.ZodObject<{
        model_id: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
        prompt_id: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
        inputs: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        parameters: z.ZodOptional<z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>>;
        use_default: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
    }, "strip", z.ZodTypeAny, {
        model_id?: string | null | undefined;
        prompt_id?: string | null | undefined;
        inputs?: string[] | undefined;
        parameters?: Record<string, any> | undefined;
        use_default?: boolean | undefined;
    }, {
        model_id?: string | null | undefined;
        prompt_id?: string | null | undefined;
        inputs?: string[] | undefined;
        parameters?: Record<string, any> | undefined;
        use_default?: boolean | undefined;
    }>;
    status: z.ZodOptional<z.ZodEnum<["SUCCESS", "ERROR"]>>;
    created_at: z.ZodDate;
    response: z.ZodNullable<z.ZodObject<{
        model_id: z.ZodString;
        created_at: z.ZodDate;
        results: z.ZodArray<z.ZodObject<{
            generated_text: z.ZodString;
            generated_token_count: z.ZodNumber;
            input_token_count: z.ZodNumber;
            stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            generated_text: z.ZodString;
            generated_token_count: z.ZodNumber;
            input_token_count: z.ZodNumber;
            stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            generated_text: z.ZodString;
            generated_token_count: z.ZodNumber;
            input_token_count: z.ZodNumber;
            stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
        }, z.ZodTypeAny, "passthrough">>, "many">;
        moderation: z.ZodOptional<z.ZodObject<{
            hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, z.ZodTypeAny, "passthrough">>, "many">>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, z.ZodTypeAny, "passthrough">>, "many">>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, z.ZodTypeAny, "passthrough">>, "many">>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        model_id: z.ZodString;
        created_at: z.ZodDate;
        results: z.ZodArray<z.ZodObject<{
            generated_text: z.ZodString;
            generated_token_count: z.ZodNumber;
            input_token_count: z.ZodNumber;
            stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            generated_text: z.ZodString;
            generated_token_count: z.ZodNumber;
            input_token_count: z.ZodNumber;
            stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            generated_text: z.ZodString;
            generated_token_count: z.ZodNumber;
            input_token_count: z.ZodNumber;
            stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
        }, z.ZodTypeAny, "passthrough">>, "many">;
        moderation: z.ZodOptional<z.ZodObject<{
            hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, z.ZodTypeAny, "passthrough">>, "many">>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, z.ZodTypeAny, "passthrough">>, "many">>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, z.ZodTypeAny, "passthrough">>, "many">>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        model_id: z.ZodString;
        created_at: z.ZodDate;
        results: z.ZodArray<z.ZodObject<{
            generated_text: z.ZodString;
            generated_token_count: z.ZodNumber;
            input_token_count: z.ZodNumber;
            stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            generated_text: z.ZodString;
            generated_token_count: z.ZodNumber;
            input_token_count: z.ZodNumber;
            stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            generated_text: z.ZodString;
            generated_token_count: z.ZodNumber;
            input_token_count: z.ZodNumber;
            stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
        }, z.ZodTypeAny, "passthrough">>, "many">;
        moderation: z.ZodOptional<z.ZodObject<{
            hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, z.ZodTypeAny, "passthrough">>, "many">>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, z.ZodTypeAny, "passthrough">>, "many">>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, z.ZodTypeAny, "passthrough">>, "many">>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">>>;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    id: z.ZodString;
    duration: z.ZodNumber;
    request: z.ZodObject<{
        model_id: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
        prompt_id: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
        inputs: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        parameters: z.ZodOptional<z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>>;
        use_default: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
    }, "strip", z.ZodTypeAny, {
        model_id?: string | null | undefined;
        prompt_id?: string | null | undefined;
        inputs?: string[] | undefined;
        parameters?: Record<string, any> | undefined;
        use_default?: boolean | undefined;
    }, {
        model_id?: string | null | undefined;
        prompt_id?: string | null | undefined;
        inputs?: string[] | undefined;
        parameters?: Record<string, any> | undefined;
        use_default?: boolean | undefined;
    }>;
    status: z.ZodOptional<z.ZodEnum<["SUCCESS", "ERROR"]>>;
    created_at: z.ZodDate;
    response: z.ZodNullable<z.ZodObject<{
        model_id: z.ZodString;
        created_at: z.ZodDate;
        results: z.ZodArray<z.ZodObject<{
            generated_text: z.ZodString;
            generated_token_count: z.ZodNumber;
            input_token_count: z.ZodNumber;
            stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            generated_text: z.ZodString;
            generated_token_count: z.ZodNumber;
            input_token_count: z.ZodNumber;
            stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            generated_text: z.ZodString;
            generated_token_count: z.ZodNumber;
            input_token_count: z.ZodNumber;
            stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
        }, z.ZodTypeAny, "passthrough">>, "many">;
        moderation: z.ZodOptional<z.ZodObject<{
            hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, z.ZodTypeAny, "passthrough">>, "many">>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, z.ZodTypeAny, "passthrough">>, "many">>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, z.ZodTypeAny, "passthrough">>, "many">>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        model_id: z.ZodString;
        created_at: z.ZodDate;
        results: z.ZodArray<z.ZodObject<{
            generated_text: z.ZodString;
            generated_token_count: z.ZodNumber;
            input_token_count: z.ZodNumber;
            stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            generated_text: z.ZodString;
            generated_token_count: z.ZodNumber;
            input_token_count: z.ZodNumber;
            stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            generated_text: z.ZodString;
            generated_token_count: z.ZodNumber;
            input_token_count: z.ZodNumber;
            stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
        }, z.ZodTypeAny, "passthrough">>, "many">;
        moderation: z.ZodOptional<z.ZodObject<{
            hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, z.ZodTypeAny, "passthrough">>, "many">>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, z.ZodTypeAny, "passthrough">>, "many">>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, z.ZodTypeAny, "passthrough">>, "many">>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        model_id: z.ZodString;
        created_at: z.ZodDate;
        results: z.ZodArray<z.ZodObject<{
            generated_text: z.ZodString;
            generated_token_count: z.ZodNumber;
            input_token_count: z.ZodNumber;
            stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            generated_text: z.ZodString;
            generated_token_count: z.ZodNumber;
            input_token_count: z.ZodNumber;
            stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            generated_text: z.ZodString;
            generated_token_count: z.ZodNumber;
            input_token_count: z.ZodNumber;
            stop_reason: z.ZodEnum<["NOT_FINISHED", "MAX_TOKENS", "EOS_TOKEN", "CANCELLED", "TIME_LIMIT", "STOP_SEQUENCE", "TOKEN_LIMIT", "ERROR"]>;
        }, z.ZodTypeAny, "passthrough">>, "many">;
        moderation: z.ZodOptional<z.ZodObject<{
            hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, z.ZodTypeAny, "passthrough">>, "many">>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, z.ZodTypeAny, "passthrough">>, "many">>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            hap: z.ZodOptional<z.ZodArray<z.ZodObject<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                success: z.ZodBoolean;
                flagged: z.ZodBoolean;
                score: z.ZodNumber;
                position: z.ZodObject<{
                    start: z.ZodNumber;
                    stop: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    start: number;
                    stop: number;
                }, {
                    start: number;
                    stop: number;
                }>;
            }, z.ZodTypeAny, "passthrough">>, "many">>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">>>;
}, z.ZodTypeAny, "passthrough">>;
type HistoryOutput = z.infer<typeof HistoryOutputSchema>;
declare const HistoryStatusSchema: z.ZodEnum<["SUCCESS", "ERROR"]>;
type HistoryStatus = z.infer<typeof HistoryStatusSchema>;
declare const HistoryOriginSchema: z.ZodEnum<["API", "UI"]>;
type HistoryOrigin = z.infer<typeof HistoryOriginSchema>;
declare const FilePurposeSchema: z.ZodEnum<["tune", "template", "tune_import"]>;
type FilePupose = z.infer<typeof FilePurposeSchema>;
declare const FileInputSchema: z.ZodObject<{
    id: z.ZodString;
}, "strict", z.ZodTypeAny, {
    id: string;
}, {
    id: string;
}>;
type FileInput = z.input<typeof FileInputSchema>;
declare const FileCreateInputSchema: z.ZodObject<{
    purpose: z.ZodEnum<["tune", "template", "tune_import"]>;
    filename: z.ZodString;
    file: z.ZodType<Readable$1, z.ZodTypeDef, Readable$1>;
}, "strip", z.ZodTypeAny, {
    purpose: "template" | "tune" | "tune_import";
    filename: string;
    file: Readable$1;
}, {
    purpose: "template" | "tune" | "tune_import";
    filename: string;
    file: Readable$1;
}>;
type FileCreateInput = z.input<typeof FileCreateInputSchema>;
declare const FileOutputSchema: z.ZodIntersection<z.ZodObject<{
    id: z.ZodString;
    file_name: z.ZodString;
    purpose: z.ZodEnum<["tune", "template", "tune_import"]>;
    created_at: z.ZodDate;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    id: z.ZodString;
    file_name: z.ZodString;
    purpose: z.ZodEnum<["tune", "template", "tune_import"]>;
    created_at: z.ZodDate;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    id: z.ZodString;
    file_name: z.ZodString;
    purpose: z.ZodEnum<["tune", "template", "tune_import"]>;
    created_at: z.ZodDate;
}, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
    download: z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodType<Promise<Readable$1>, z.ZodTypeDef, Promise<Readable$1>>>;
}, "strip", z.ZodTypeAny, {
    download: (...args: unknown[]) => Promise<Readable$1>;
}, {
    download: (...args: unknown[]) => Promise<Readable$1>;
}>>;
type FileOutput = z.output<typeof FileOutputSchema>;
declare const FileDeleteOutputSchema: z.ZodVoid;
type FileDeleteOutput = z.output<typeof FileDeleteOutputSchema>;
declare const FilesInputSchema: z.ZodObject<{
    offset: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    count: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    offset?: number | null | undefined;
    count?: number | null | undefined;
}, {
    offset?: number | null | undefined;
    count?: number | null | undefined;
}>;
type FilesInput = z.input<typeof FilesInputSchema>;
type FileOptions = HttpHandlerOptions & FlagOption<'delete', false>;
type FileDeleteOptions = HttpHandlerOptions & FlagOption<'delete', true>;
declare const FilesOutputSchema: z.ZodObject<{
    id: z.ZodString;
    file_name: z.ZodString;
    purpose: z.ZodEnum<["tune", "template", "tune_import"]>;
    created_at: z.ZodDate;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    id: z.ZodString;
    file_name: z.ZodString;
    purpose: z.ZodEnum<["tune", "template", "tune_import"]>;
    created_at: z.ZodDate;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    id: z.ZodString;
    file_name: z.ZodString;
    purpose: z.ZodEnum<["tune", "template", "tune_import"]>;
    created_at: z.ZodDate;
}, z.ZodTypeAny, "passthrough">>;
type FilesOutput = z.output<typeof FilesOutputSchema>;
declare const ChatInputSchema: z.ZodUnion<[z.ZodObject<{
    model_id: z.ZodString;
    messages: z.ZodArray<z.ZodObject<{
        role: z.ZodEnum<["user", "system", "assistant"]>;
        content: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        role: "user" | "system" | "assistant";
        content: string;
    }, {
        role: "user" | "system" | "assistant";
        content: string;
    }>, "many">;
    conversation_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    parent_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    prompt_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    parameters: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
}, "strip", z.ZodTypeAny, {
    model_id: string;
    messages: {
        role: "user" | "system" | "assistant";
        content: string;
    }[];
    conversation_id?: string | null | undefined;
    parent_id?: string | null | undefined;
    prompt_id?: string | null | undefined;
    parameters?: Record<string, any> | null | undefined;
}, {
    model_id: string;
    messages: {
        role: "user" | "system" | "assistant";
        content: string;
    }[];
    conversation_id?: string | null | undefined;
    parent_id?: string | null | undefined;
    prompt_id?: string | null | undefined;
    parameters?: Record<string, any> | null | undefined;
}>, z.ZodObject<{
    model_id: z.ZodString;
    messages: z.ZodArray<z.ZodObject<{
        role: z.ZodEnum<["user", "system", "assistant"]>;
        content: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        role: "user" | "system" | "assistant";
        content: string;
    }, {
        role: "user" | "system" | "assistant";
        content: string;
    }>, "many">;
    conversation_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    parent_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    prompt_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    parameters: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
}, "strip", z.ZodTypeAny, {
    model_id: string;
    messages: {
        role: "user" | "system" | "assistant";
        content: string;
    }[];
    conversation_id?: string | null | undefined;
    parent_id?: string | null | undefined;
    prompt_id?: string | null | undefined;
    parameters?: Record<string, any> | null | undefined;
}, {
    model_id: string;
    messages: {
        role: "user" | "system" | "assistant";
        content: string;
    }[];
    conversation_id?: string | null | undefined;
    parent_id?: string | null | undefined;
    prompt_id?: string | null | undefined;
    parameters?: Record<string, any> | null | undefined;
}>]>;
type ChatInput = z.input<typeof ChatInputSchema>;
type ChatOptions = HttpHandlerNoStreamOptions;
declare const ChatOutputSchema: z.ZodObject<{
    conversation_id: z.ZodString;
    result: z.ZodObject<{
        generated_text: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        generated_text?: string | undefined;
    }, {
        generated_text?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    conversation_id: string;
    result: {
        generated_text?: string | undefined;
    };
}, {
    conversation_id: string;
    result: {
        generated_text?: string | undefined;
    };
}>;
type ChatOutput = z.output<typeof ChatOutputSchema>;
declare const ChatStreamInputSchema: z.ZodObject<{
    model_id: z.ZodString;
    messages: z.ZodArray<z.ZodObject<{
        role: z.ZodEnum<["user", "system", "assistant"]>;
        content: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        role: "user" | "system" | "assistant";
        content: string;
    }, {
        role: "user" | "system" | "assistant";
        content: string;
    }>, "many">;
    conversation_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    parent_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    prompt_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    parameters: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
}, "strip", z.ZodTypeAny, {
    model_id: string;
    messages: {
        role: "user" | "system" | "assistant";
        content: string;
    }[];
    conversation_id?: string | null | undefined;
    parent_id?: string | null | undefined;
    prompt_id?: string | null | undefined;
    parameters?: Record<string, any> | null | undefined;
}, {
    model_id: string;
    messages: {
        role: "user" | "system" | "assistant";
        content: string;
    }[];
    conversation_id?: string | null | undefined;
    parent_id?: string | null | undefined;
    prompt_id?: string | null | undefined;
    parameters?: Record<string, any> | null | undefined;
}>;
type ChatStreamInput = z.input<typeof ChatStreamInputSchema>;
type ChatStreamOptions = HttpHandlerStreamOptions;
declare const ChatStreamOutputSchema: z.ZodObject<{
    conversation_id: z.ZodString;
    result: z.ZodObject<{
        generated_text: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        generated_text?: string | undefined;
    }, {
        generated_text?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    conversation_id: string;
    result: {
        generated_text?: string | undefined;
    };
}, {
    conversation_id: string;
    result: {
        generated_text?: string | undefined;
    };
}>;
type ChatStreamOutput = z.output<typeof ChatStreamOutputSchema>;

type RawHeaders = Record<string, string>;
interface Configuration {
    apiKey?: string;
    endpoint?: string;
    headers?: RawHeaders;
    retries?: HttpHandlerOptions['retries'];
}
declare class Client {
    #private;
    constructor(config?: Configuration);
    tokenize(input: TokenizeInput, options?: HttpHandlerOptions): Promise<TokenizeOutput>;
    tokenize(input: TokenizeInput, options: HttpHandlerOptions, callback: Callback<TokenizeOutput>): void;
    tokenize(input: TokenizeInput, callback: Callback<TokenizeOutput>): void;
    generate(input: GenerateInput, callback: Callback<GenerateOutput>): void;
    generate(input: GenerateInput[], callback: Callback<GenerateOutput>): void;
    generate(input: GenerateInput, options: HttpHandlerStreamOptions, callback: Callback<GenerateOutput | null>): void;
    generate(input: GenerateInput, options: HttpHandlerNoStreamOptions, callback: Callback<GenerateOutput>): void;
    generate(input: GenerateInput, options?: HttpHandlerNoStreamOptions): Promise<GenerateOutput>;
    generate(input: GenerateInput, options: HttpHandlerStreamOptions): TypedReadable<GenerateOutput>;
    generate(input: GenerateInput[], options: HttpHandlerNoStreamOptions, callback: Callback<GenerateOutput>): void;
    generate(input: GenerateInput[], options?: HttpHandlerNoStreamOptions): Promise<GenerateOutput>[];
    generateConfig(options: GenerateConfigOptions, callback: Callback<GenerateConfigOutput>): void;
    generateConfig(options?: GenerateConfigOptions): Promise<GenerateConfigOutput>;
    generateConfig(input: GenerateConfigInput, options?: GenerateConfigInputOptions): Promise<GenerateConfigOutput>;
    generateConfig(input: GenerateConfigInput, options?: GenerateConfigInputOptions): Promise<GenerateConfigOutput>;
    generateConfig(input: GenerateConfigInput, options: GenerateConfigInputOptions, callback: Callback<GenerateConfigOutput>): void;
    generateConfig(input: GenerateConfigInput, callback: Callback<GenerateConfigOutput>): void;
    generateLimits(input?: GenerateLimitsInput, options?: HttpHandlerOptions): Promise<GenerateLimitsOutput>;
    generateLimits(callback: Callback<GenerateLimitsOutput>): void;
    generateLimits(input: GenerateLimitsInput, callback: Callback<GenerateLimitsOutput>): void;
    generateLimits(input: GenerateLimitsInput, options: HttpHandlerOptions, callback: Callback<GenerateLimitsOutput>): void;
    models(callback: Callback<ModelsOutput>): void;
    models(input: ModelsInput, callback: Callback<ModelsOutput>): void;
    models(input: ModelsInput, options: HttpHandlerOptions, callback: Callback<ModelsOutput>): void;
    models(input?: ModelsInput, options?: HttpHandlerOptions): Promise<ModelsOutput>;
    model(input: ModelInput, options?: HttpHandlerOptions): Promise<ModelOutput>;
    model(input: ModelInput, options: HttpHandlerOptions, callback: Callback<ModelOutput>): void;
    model(input: ModelInput, callback: Callback<ModelOutput>): void;
    tunes(callback: Callback<TunesOutput>): void;
    tunes(input: TunesInput, callback: Callback<TunesOutput>): void;
    tunes(input: TunesInput, options: HttpHandlerOptions, callback: Callback<TunesOutput>): void;
    tunes(input?: TunesInput, options?: HttpHandlerOptions): AsyncGenerator<TunesOutput>;
    tune(input: TuneCreateInput, options?: TuneCreateOptions): Promise<TuneOutput>;
    tune(input: TuneInput, options?: TuneOptions): Promise<TuneOutput>;
    tune(input: TuneCreateInput, options: TuneCreateOptions, callback: Callback<TuneOutput>): void;
    tune(input: TuneInput, options: TuneOptions, callback: Callback<void>): void;
    tune(input: TuneCreateInput, callback: Callback<TuneOutput>): void;
    tune(input: TuneInput, callback: Callback<void>): void;
    tuneMethods(callback: Callback<TuneMethodsOutput>): void;
    tuneMethods(input: TuneMethodsInput, callback: Callback<TuneMethodsOutput>): void;
    tuneMethods(input: TuneMethodsInput, options: HttpHandlerOptions, callback: Callback<TuneMethodsOutput>): void;
    tuneMethods(input?: TuneMethodsInput, options?: HttpHandlerOptions): Promise<TuneMethodsOutput>;
    promptTemplate(input: StrictUnion<PromptTemplateInput | PromptTemplateUpdateInput>, callback: Callback<PromptTemplateOutput>): void;
    promptTemplate(input: StrictUnion<PromptTemplateInput | PromptTemplateUpdateInput>, options: PromptTemplateOptions, callback: Callback<PromptTemplateOutput>): void;
    promptTemplate(input: StrictUnion<PromptTemplateInput | PromptTemplateCreateInput | PromptTemplateUpdateInput>, options?: PromptTemplateOptions): Promise<PromptTemplateOutput>;
    promptTemplate(input: PromptTemplateInput, options: PromptTemplateDeleteOptions): Promise<PromptTemplateDeleteOutput>;
    promptTemplate(input: PromptTemplateInput, options: PromptTemplateDeleteOptions, callback: Callback<PromptTemplateDeleteOutput>): void;
    promptTemplate(input: PromptTemplateCreateInput, callback: Callback<PromptTemplateOutput>): void;
    promptTemplates(callback: Callback<PromptTemplatesOutput>): void;
    promptTemplates(input: PromptTemplatesInput, callback: Callback<PromptTemplatesOutput>): void;
    promptTemplates(input: PromptTemplatesInput, options: HttpHandlerOptions, callback: Callback<PromptTemplatesOutput>): void;
    promptTemplates(input?: PromptTemplatesInput, options?: HttpHandlerOptions): AsyncGenerator<PromptTemplatesOutput>;
    promptTemplateExecute(input: PromptTemplateExecuteInput, options?: PromptTemplateExecuteOptions): Promise<PromptTemplateExecuteOutput>;
    promptTemplateExecute(input: PromptTemplateExecuteInput, options: PromptTemplateExecuteOptions, callback: Callback<PromptTemplateExecuteOutput>): void;
    promptTemplateExecute(input: PromptTemplateExecuteInput, callback: Callback<PromptTemplateExecuteOutput>): void;
    history(callback: Callback<HistoryOutput>): void;
    history(input: HistoryInput, callback: Callback<HistoryOutput>): void;
    history(input: HistoryInput, options: HistoryOptions, callback: Callback<HistoryOutput>): void;
    history(input?: HistoryInput, options?: HistoryOptions): AsyncGenerator<HistoryOutput>;
    files(callback: Callback<FilesOutput>): void;
    files(input: FilesInput, callback: Callback<FilesOutput>): void;
    files(input: FilesInput, options: HttpHandlerOptions, callback: Callback<FilesOutput>): void;
    files(input?: FilesInput, options?: HttpHandlerOptions): AsyncGenerator<FilesOutput>;
    file(input: FileInput, callback: Callback<FileOutput>): void;
    file(input: FileInput, options: FileOptions, callback: Callback<FileOutput>): void;
    file(input: StrictUnion<FileInput | FileCreateInput>, options?: FileOptions): Promise<FileOutput>;
    file(input: FileInput, options: FileDeleteOptions): Promise<FileDeleteOutput>;
    file(input: FileInput, options: FileDeleteOptions, callback: Callback<FileDeleteOutput>): void;
    file(input: FileCreateInput, callback: Callback<FileOutput>): void;
    chat(input: ChatInput, callback: Callback<ChatOutput>): void;
    chat(input: ChatInput, options: ChatOptions, callback: Callback<ChatOutput>): void;
    chat(input: ChatStreamInput, options: ChatStreamOptions, callback: Callback<ChatStreamOutput | null>): void;
    chat(input: ChatInput, options?: ChatOptions): Promise<ChatOutput>;
    chat(input: ChatStreamInput, options?: ChatStreamOptions): TypedReadable<ChatStreamOutput>;
}

export { PromptTemplateInputSchema as $, ModelOutput as A, TunesInputSchema as B, Configuration as C, TunesInput as D, ErrorExtensions as E, TunesOutput as F, GenerateInputSchema as G, HttpHandlerOptions as H, TuneAssetType as I, TuneAssetTypeSchema as J, TuneInputSchema as K, TuneInput as L, ModelsInputSchema as M, TuneOptions as N, TuneCreateInputSchema as O, TuneCreateInput as P, TuneCreateOptions as Q, RawHeaders as R, TuneOutputSchema as S, TokenizeInputSchema as T, TuneOutput as U, TuneDeleteOutputSchema as V, TuneDeleteOutput as W, TuneMethodsInputSchema as X, TuneMethodsInput as Y, TuneMethodsOutputSchema as Z, TuneMethodsOutput as _, ErrorResponse as a, PromptTemplateInput as a0, PromptTemplateCreateInputSchema as a1, PromptTemplateCreateInput as a2, PromptTemplateUpdateInputSchema as a3, PromptTemplateUpdateInput as a4, PromptTemplateOutputSchema as a5, PromptTemplateOutput as a6, PromptTemplateDeleteOutputSchema as a7, PromptTemplateDeleteOutput as a8, PromptTemplatesInputSchema as a9, FileOutput as aA, FileDeleteOutputSchema as aB, FileDeleteOutput as aC, FilesInputSchema as aD, FilesInput as aE, FileOptions as aF, FileDeleteOptions as aG, FilesOutputSchema as aH, FilesOutput as aI, ChatInputSchema as aJ, ChatInput as aK, ChatOptions as aL, ChatOutputSchema as aM, ChatOutput as aN, ChatStreamInputSchema as aO, ChatStreamInput as aP, ChatStreamOptions as aQ, ChatStreamOutputSchema as aR, ChatStreamOutput as aS, RequiredPartial as aT, PromptTemplatesInput as aa, PromptTemplatesOutputSchema as ab, PromptTemplatesOutput as ac, PromptTemplateOptions as ad, PromptTemplateDeleteOptions as ae, PromptTemplateExecuteInputSchema as af, PromptTemplateExecuteInput as ag, PromptTemplateExecuteOutputSchema as ah, PromptTemplateExecuteOutput as ai, PromptTemplateExecuteOptions as aj, HistoryInputSchema as ak, HistoryInput as al, HistoryOptions as am, HistoryOutputSchema as an, HistoryOutput as ao, HistoryStatusSchema as ap, HistoryStatus as aq, HistoryOriginSchema as ar, HistoryOrigin as as, FilePurposeSchema as at, FilePupose as au, FileInputSchema as av, FileInput as aw, FileCreateInputSchema as ax, FileCreateInput as ay, FileOutputSchema as az, apiTypes as b, Client as c, HttpHandlerNoStreamOptions as d, HttpHandlerStreamOptions as e, GenerateInput as f, GenerateOutput as g, GenerateConfigInputSchema as h, GenerateConfigInput as i, GenerateConfigOutputSchema as j, GenerateConfigOutput as k, GenerateConfigOptions as l, GenerateConfigInputOptions as m, GenerateLimitsInputSchema as n, GenerateLimitsInput as o, GenerateLimitsOutputSchema as p, GenerateLimitsOutput as q, TokenizeInput as r, TokenizeOutputSchema as s, TokenizeOutput as t, ModelsInput as u, ModelsOutputSchema as v, ModelsOutput as w, ModelInputSchema as x, ModelInput as y, ModelOutputSchema as z };
